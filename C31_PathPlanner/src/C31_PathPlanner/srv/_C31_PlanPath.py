"""autogenerated by genpy from C31_PathPlanner/C31_PlanPathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C31_PathPlanner.msg

class C31_PlanPathRequest(genpy.Message):
  _md5sum = "b4390ef85af0588a9c0a353617a9ba23"
  _type = "C31_PathPlanner/C31_PlanPathRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C31_PathPlanner/C31_Map map
C31_PathPlanner/C31_Location start
C31_PathPlanner/C31_Location destination
C31_PathPlanner/C31_Constraints constraints
uint8 algorithm

================================================================================
MSG: C31_PathPlanner/C31_Map
uint32 width 
uint32 height
uint8[] data
float64 resolution
C31_PathPlanner/C31_Position offset

================================================================================
MSG: C31_PathPlanner/C31_Position
C31_PathPlanner/C31_Location location
float64 orientation

================================================================================
MSG: C31_PathPlanner/C31_Location
float64 x
float64 y
================================================================================
MSG: C31_PathPlanner/C31_Constraints
C31_PathPlanner/C31_RobotDimension robot
C31_PathPlanner/C31_Waypoints transits
C31_PathPlanner/C31_Charge[] attractors
C31_PathPlanner/C31_Charge[] repulsors
C31_PathPlanner/C31_Corridor corridor

================================================================================
MSG: C31_PathPlanner/C31_RobotDimension
float64 size
================================================================================
MSG: C31_PathPlanner/C31_Waypoints
C31_PathPlanner/C31_Location[] points
================================================================================
MSG: C31_PathPlanner/C31_Charge
C31_PathPlanner/C31_Location location
float64 power
uint32 type

================================================================================
MSG: C31_PathPlanner/C31_Corridor
float64 width
C31_PathPlanner/C31_Waypoints path
"""
  __slots__ = ['map','start','destination','constraints','algorithm']
  _slot_types = ['C31_PathPlanner/C31_Map','C31_PathPlanner/C31_Location','C31_PathPlanner/C31_Location','C31_PathPlanner/C31_Constraints','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       map,start,destination,constraints,algorithm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C31_PlanPathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.map is None:
        self.map = C31_PathPlanner.msg.C31_Map()
      if self.start is None:
        self.start = C31_PathPlanner.msg.C31_Location()
      if self.destination is None:
        self.destination = C31_PathPlanner.msg.C31_Location()
      if self.constraints is None:
        self.constraints = C31_PathPlanner.msg.C31_Constraints()
      if self.algorithm is None:
        self.algorithm = 0
    else:
      self.map = C31_PathPlanner.msg.C31_Map()
      self.start = C31_PathPlanner.msg.C31_Location()
      self.destination = C31_PathPlanner.msg.C31_Location()
      self.constraints = C31_PathPlanner.msg.C31_Constraints()
      self.algorithm = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.map.width, _x.map.height))
      _x = self.map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.map.resolution, _x.map.offset.location.x, _x.map.offset.location.y, _x.map.offset.orientation, _x.start.x, _x.start.y, _x.destination.x, _x.destination.y, _x.constraints.robot.size))
      length = len(self.constraints.transits.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.transits.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
      length = len(self.constraints.attractors)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.attractors:
        _v1 = val1.location
        _x = _v1
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _x = val1
        buff.write(_struct_dI.pack(_x.power, _x.type))
      length = len(self.constraints.repulsors)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.repulsors:
        _v2 = val1.location
        _x = _v2
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _x = val1
        buff.write(_struct_dI.pack(_x.power, _x.type))
      buff.write(_struct_d.pack(self.constraints.corridor.width))
      length = len(self.constraints.corridor.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.corridor.path.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
      buff.write(_struct_B.pack(self.algorithm))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.map is None:
        self.map = C31_PathPlanner.msg.C31_Map()
      if self.start is None:
        self.start = C31_PathPlanner.msg.C31_Location()
      if self.destination is None:
        self.destination = C31_PathPlanner.msg.C31_Location()
      if self.constraints is None:
        self.constraints = C31_PathPlanner.msg.C31_Constraints()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.map.width, _x.map.height,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.data = str[start:end].decode('utf-8')
      else:
        self.map.data = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.map.resolution, _x.map.offset.location.x, _x.map.offset.location.y, _x.map.offset.orientation, _x.start.x, _x.start.y, _x.destination.x, _x.destination.y, _x.constraints.robot.size,) = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.transits.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Location()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.constraints.transits.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.attractors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Charge()
        _v3 = val1.location
        _x = _v3
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.power, _x.type,) = _struct_dI.unpack(str[start:end])
        self.constraints.attractors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.repulsors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Charge()
        _v4 = val1.location
        _x = _v4
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.power, _x.type,) = _struct_dI.unpack(str[start:end])
        self.constraints.repulsors.append(val1)
      start = end
      end += 8
      (self.constraints.corridor.width,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.corridor.path.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Location()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.constraints.corridor.path.points.append(val1)
      start = end
      end += 1
      (self.algorithm,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.map.width, _x.map.height))
      _x = self.map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.map.resolution, _x.map.offset.location.x, _x.map.offset.location.y, _x.map.offset.orientation, _x.start.x, _x.start.y, _x.destination.x, _x.destination.y, _x.constraints.robot.size))
      length = len(self.constraints.transits.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.transits.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
      length = len(self.constraints.attractors)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.attractors:
        _v5 = val1.location
        _x = _v5
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _x = val1
        buff.write(_struct_dI.pack(_x.power, _x.type))
      length = len(self.constraints.repulsors)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.repulsors:
        _v6 = val1.location
        _x = _v6
        buff.write(_struct_2d.pack(_x.x, _x.y))
        _x = val1
        buff.write(_struct_dI.pack(_x.power, _x.type))
      buff.write(_struct_d.pack(self.constraints.corridor.width))
      length = len(self.constraints.corridor.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.corridor.path.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
      buff.write(_struct_B.pack(self.algorithm))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.map is None:
        self.map = C31_PathPlanner.msg.C31_Map()
      if self.start is None:
        self.start = C31_PathPlanner.msg.C31_Location()
      if self.destination is None:
        self.destination = C31_PathPlanner.msg.C31_Location()
      if self.constraints is None:
        self.constraints = C31_PathPlanner.msg.C31_Constraints()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.map.width, _x.map.height,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.data = str[start:end].decode('utf-8')
      else:
        self.map.data = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.map.resolution, _x.map.offset.location.x, _x.map.offset.location.y, _x.map.offset.orientation, _x.start.x, _x.start.y, _x.destination.x, _x.destination.y, _x.constraints.robot.size,) = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.transits.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Location()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.constraints.transits.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.attractors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Charge()
        _v7 = val1.location
        _x = _v7
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.power, _x.type,) = _struct_dI.unpack(str[start:end])
        self.constraints.attractors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.repulsors = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Charge()
        _v8 = val1.location
        _x = _v8
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.power, _x.type,) = _struct_dI.unpack(str[start:end])
        self.constraints.repulsors.append(val1)
      start = end
      end += 8
      (self.constraints.corridor.width,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.corridor.path.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Location()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.constraints.corridor.path.points.append(val1)
      start = end
      end += 1
      (self.algorithm,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_dI = struct.Struct("<dI")
_struct_9d = struct.Struct("<9d")
_struct_2d = struct.Struct("<2d")
_struct_2I = struct.Struct("<2I")
"""autogenerated by genpy from C31_PathPlanner/C31_PlanPathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C31_PathPlanner.msg

class C31_PlanPathResponse(genpy.Message):
  _md5sum = "739719a412d19d27628ddb9be2472190"
  _type = "C31_PathPlanner/C31_PlanPathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C31_PathPlanner/C31_Waypoints path


================================================================================
MSG: C31_PathPlanner/C31_Waypoints
C31_PathPlanner/C31_Location[] points
================================================================================
MSG: C31_PathPlanner/C31_Location
float64 x
float64 y
"""
  __slots__ = ['path']
  _slot_types = ['C31_PathPlanner/C31_Waypoints']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C31_PlanPathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = C31_PathPlanner.msg.C31_Waypoints()
    else:
      self.path = C31_PathPlanner.msg.C31_Waypoints()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path is None:
        self.path = C31_PathPlanner.msg.C31_Waypoints()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Location()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.path.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path is None:
        self.path = C31_PathPlanner.msg.C31_Waypoints()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Location()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.path.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
class C31_PlanPath(object):
  _type          = 'C31_PathPlanner/C31_PlanPath'
  _md5sum = 'b008e399e8af4f57fa934ed9321595c5'
  _request_class  = C31_PlanPathRequest
  _response_class = C31_PlanPathResponse
