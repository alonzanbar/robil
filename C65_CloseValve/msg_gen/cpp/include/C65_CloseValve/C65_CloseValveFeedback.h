/* Auto-generated by genmsg_cpp for file /home/lab116/git2/robil/C65_CloseValve/msg/C65_CloseValveFeedback.msg */
#ifndef C65_CLOSEVALVE_MESSAGE_C65_CLOSEVALVEFEEDBACK_H
#define C65_CLOSEVALVE_MESSAGE_C65_CLOSEVALVEFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C65_CloseValve
{
template <class ContainerAllocator>
struct C65_CloseValveFeedback_ {
  typedef C65_CloseValveFeedback_<ContainerAllocator> Type;

  C65_CloseValveFeedback_()
  : location()
  {
    location.assign(0.0);
  }

  C65_CloseValveFeedback_(const ContainerAllocator& _alloc)
  : location()
  {
    location.assign(0.0);
  }

  typedef boost::array<float, 2>  _location_type;
  boost::array<float, 2>  location;


  typedef boost::shared_ptr< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C65_CloseValveFeedback
typedef  ::C65_CloseValve::C65_CloseValveFeedback_<std::allocator<void> > C65_CloseValveFeedback;

typedef boost::shared_ptr< ::C65_CloseValve::C65_CloseValveFeedback> C65_CloseValveFeedbackPtr;
typedef boost::shared_ptr< ::C65_CloseValve::C65_CloseValveFeedback const> C65_CloseValveFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C65_CloseValve

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "94531a90a08479b3a4559af23bb56f70";
  }

  static const char* value(const  ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x94531a90a08479b3ULL;
  static const uint64_t static_value2 = 0xa4559af23bb56f70ULL;
};

template<class ContainerAllocator>
struct DataType< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C65_CloseValve/C65_CloseValveFeedback";
  }

  static const char* value(const  ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
float32[2] location\n\
\n\
\n\
";
  }

  static const char* value(const  ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.location);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C65_CloseValveFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C65_CloseValve::C65_CloseValveFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "location[]" << std::endl;
    for (size_t i = 0; i < v.location.size(); ++i)
    {
      s << indent << "  location[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.location[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C65_CLOSEVALVE_MESSAGE_C65_CLOSEVALVEFEEDBACK_H

