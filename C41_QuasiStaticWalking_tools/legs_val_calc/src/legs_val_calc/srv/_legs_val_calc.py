"""autogenerated by genpy from legs_val_calc/legs_val_calcRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class legs_val_calcRequest(genpy.Message):
  _md5sum = "19fda91e8718638a8d88255cf2ddf6dc"
  _type = "legs_val_calc/legs_val_calcRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x_dot
float64 y_dot
float64 z_dot
float64 roll_dot
float64 pitch_dot
float64 yaw_dot

"""
  __slots__ = ['x_dot','y_dot','z_dot','roll_dot','pitch_dot','yaw_dot']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_dot,y_dot,z_dot,roll_dot,pitch_dot,yaw_dot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(legs_val_calcRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_dot is None:
        self.x_dot = 0.
      if self.y_dot is None:
        self.y_dot = 0.
      if self.z_dot is None:
        self.z_dot = 0.
      if self.roll_dot is None:
        self.roll_dot = 0.
      if self.pitch_dot is None:
        self.pitch_dot = 0.
      if self.yaw_dot is None:
        self.yaw_dot = 0.
    else:
      self.x_dot = 0.
      self.y_dot = 0.
      self.z_dot = 0.
      self.roll_dot = 0.
      self.pitch_dot = 0.
      self.yaw_dot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.x_dot, _x.y_dot, _x.z_dot, _x.roll_dot, _x.pitch_dot, _x.yaw_dot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.x_dot, _x.y_dot, _x.z_dot, _x.roll_dot, _x.pitch_dot, _x.yaw_dot,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.x_dot, _x.y_dot, _x.z_dot, _x.roll_dot, _x.pitch_dot, _x.yaw_dot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.x_dot, _x.y_dot, _x.z_dot, _x.roll_dot, _x.pitch_dot, _x.yaw_dot,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
"""autogenerated by genpy from legs_val_calc/legs_val_calcResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class legs_val_calcResponse(genpy.Message):
  _md5sum = "650273c1955750faa12c370df055c2fb"
  _type = "legs_val_calc/legs_val_calcResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[6] q_left_dot
float64[6] q_right_dot


"""
  __slots__ = ['q_left_dot','q_right_dot']
  _slot_types = ['float64[6]','float64[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       q_left_dot,q_right_dot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(legs_val_calcResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.q_left_dot is None:
        self.q_left_dot = [0.,0.,0.,0.,0.,0.]
      if self.q_right_dot is None:
        self.q_right_dot = [0.,0.,0.,0.,0.,0.]
    else:
      self.q_left_dot = [0.,0.,0.,0.,0.,0.]
      self.q_right_dot = [0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_6d.pack(*self.q_left_dot))
      buff.write(_struct_6d.pack(*self.q_right_dot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 48
      self.q_left_dot = _struct_6d.unpack(str[start:end])
      start = end
      end += 48
      self.q_right_dot = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.q_left_dot.tostring())
      buff.write(self.q_right_dot.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 48
      self.q_left_dot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.q_right_dot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
class legs_val_calc(object):
  _type          = 'legs_val_calc/legs_val_calc'
  _md5sum = '211926ed88bd9685e6d894335cff749d'
  _request_class  = legs_val_calcRequest
  _response_class = legs_val_calcResponse
