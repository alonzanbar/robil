"""autogenerated by genpy from move_pelvis/move_pelvisRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class move_pelvisRequest(genpy.Message):
  _md5sum = "2aae27c69bf50447dca0ab19c4b647d2"
  _type = "move_pelvis/move_pelvisRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 PositionDestination
geometry_msgs/Vector3 AngleDestination
string LinkToMove

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['PositionDestination','AngleDestination','LinkToMove']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PositionDestination,AngleDestination,LinkToMove

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(move_pelvisRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PositionDestination is None:
        self.PositionDestination = geometry_msgs.msg.Vector3()
      if self.AngleDestination is None:
        self.AngleDestination = geometry_msgs.msg.Vector3()
      if self.LinkToMove is None:
        self.LinkToMove = ''
    else:
      self.PositionDestination = geometry_msgs.msg.Vector3()
      self.AngleDestination = geometry_msgs.msg.Vector3()
      self.LinkToMove = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.PositionDestination.x, _x.PositionDestination.y, _x.PositionDestination.z, _x.AngleDestination.x, _x.AngleDestination.y, _x.AngleDestination.z))
      _x = self.LinkToMove
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.PositionDestination is None:
        self.PositionDestination = geometry_msgs.msg.Vector3()
      if self.AngleDestination is None:
        self.AngleDestination = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.PositionDestination.x, _x.PositionDestination.y, _x.PositionDestination.z, _x.AngleDestination.x, _x.AngleDestination.y, _x.AngleDestination.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.LinkToMove = str[start:end].decode('utf-8')
      else:
        self.LinkToMove = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.PositionDestination.x, _x.PositionDestination.y, _x.PositionDestination.z, _x.AngleDestination.x, _x.AngleDestination.y, _x.AngleDestination.z))
      _x = self.LinkToMove
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.PositionDestination is None:
        self.PositionDestination = geometry_msgs.msg.Vector3()
      if self.AngleDestination is None:
        self.AngleDestination = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.PositionDestination.x, _x.PositionDestination.y, _x.PositionDestination.z, _x.AngleDestination.x, _x.AngleDestination.y, _x.AngleDestination.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.LinkToMove = str[start:end].decode('utf-8')
      else:
        self.LinkToMove = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
"""autogenerated by genpy from move_pelvis/move_pelvisResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class move_pelvisResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "move_pelvis/move_pelvisResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(move_pelvisResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class move_pelvis(object):
  _type          = 'move_pelvis/move_pelvis'
  _md5sum = '504aa341cec7ebbd99a89f97029e8342'
  _request_class  = move_pelvisRequest
  _response_class = move_pelvisResponse
