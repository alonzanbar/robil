"""autogenerated by genpy from traj_splitter_to_vector/trajectory_vectorRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class trajectory_vectorRequest(genpy.Message):
  _md5sum = "358f2ef74f703476fd610673b9067315"
  _type = "traj_splitter_to_vector/trajectory_vectorRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 Position
geometry_msgs/Vector3 Angle
int64 segments_number
float64 total_time

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['Position','Angle','segments_number','total_time']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','int64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Position,Angle,segments_number,total_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(trajectory_vectorRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Position is None:
        self.Position = geometry_msgs.msg.Vector3()
      if self.Angle is None:
        self.Angle = geometry_msgs.msg.Vector3()
      if self.segments_number is None:
        self.segments_number = 0
      if self.total_time is None:
        self.total_time = 0.
    else:
      self.Position = geometry_msgs.msg.Vector3()
      self.Angle = geometry_msgs.msg.Vector3()
      self.segments_number = 0
      self.total_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6dqd.pack(_x.Position.x, _x.Position.y, _x.Position.z, _x.Angle.x, _x.Angle.y, _x.Angle.z, _x.segments_number, _x.total_time))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Position is None:
        self.Position = geometry_msgs.msg.Vector3()
      if self.Angle is None:
        self.Angle = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.Position.x, _x.Position.y, _x.Position.z, _x.Angle.x, _x.Angle.y, _x.Angle.z, _x.segments_number, _x.total_time,) = _struct_6dqd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6dqd.pack(_x.Position.x, _x.Position.y, _x.Position.z, _x.Angle.x, _x.Angle.y, _x.Angle.z, _x.segments_number, _x.total_time))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Position is None:
        self.Position = geometry_msgs.msg.Vector3()
      if self.Angle is None:
        self.Angle = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.Position.x, _x.Position.y, _x.Position.z, _x.Angle.x, _x.Angle.y, _x.Angle.z, _x.segments_number, _x.total_time,) = _struct_6dqd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6dqd = struct.Struct("<6dqd")
"""autogenerated by genpy from traj_splitter_to_vector/trajectory_vectorResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class trajectory_vectorResponse(genpy.Message):
  _md5sum = "21305cd5431de4a8896e2a05fa6cffc5"
  _type = "traj_splitter_to_vector/trajectory_vectorResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3[] PositionArray
geometry_msgs/Vector3[] AngleArray
float64[] dt


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['PositionArray','AngleArray','dt']
  _slot_types = ['geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PositionArray,AngleArray,dt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(trajectory_vectorResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PositionArray is None:
        self.PositionArray = []
      if self.AngleArray is None:
        self.AngleArray = []
      if self.dt is None:
        self.dt = []
    else:
      self.PositionArray = []
      self.AngleArray = []
      self.dt = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.PositionArray)
      buff.write(_struct_I.pack(length))
      for val1 in self.PositionArray:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.AngleArray)
      buff.write(_struct_I.pack(length))
      for val1 in self.AngleArray:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.dt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.dt))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.PositionArray is None:
        self.PositionArray = None
      if self.AngleArray is None:
        self.AngleArray = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PositionArray = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.PositionArray.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.AngleArray = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.AngleArray.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.dt = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.PositionArray)
      buff.write(_struct_I.pack(length))
      for val1 in self.PositionArray:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.AngleArray)
      buff.write(_struct_I.pack(length))
      for val1 in self.AngleArray:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.dt)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.dt.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.PositionArray is None:
        self.PositionArray = None
      if self.AngleArray is None:
        self.AngleArray = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PositionArray = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.PositionArray.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.AngleArray = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.AngleArray.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.dt = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
class trajectory_vector(object):
  _type          = 'traj_splitter_to_vector/trajectory_vector'
  _md5sum = '4f7cd95428445f6f204b90a01ad83a95'
  _request_class  = trajectory_vectorRequest
  _response_class = trajectory_vectorResponse
