/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C41_QuasiStaticWalking/msg/QuasiStaticWalkingGoal.msg */
#ifndef C41_QUASISTATICWALKING_MESSAGE_QUASISTATICWALKINGGOAL_H
#define C41_QUASISTATICWALKING_MESSAGE_QUASISTATICWALKINGGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C41_QuasiStaticWalking
{
template <class ContainerAllocator>
struct QuasiStaticWalkingGoal_ {
  typedef QuasiStaticWalkingGoal_<ContainerAllocator> Type;

  QuasiStaticWalkingGoal_()
  : map()
  , path()
  {
  }

  QuasiStaticWalkingGoal_(const ContainerAllocator& _alloc)
  : map(_alloc)
  , path(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _map_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  map;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _path_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  path;


  typedef boost::shared_ptr< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QuasiStaticWalkingGoal
typedef  ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<std::allocator<void> > QuasiStaticWalkingGoal;

typedef boost::shared_ptr< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal> QuasiStaticWalkingGoalPtr;
typedef boost::shared_ptr< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal const> QuasiStaticWalkingGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C41_QuasiStaticWalking

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d06e69e9758817156f4795c53bb95594";
  }

  static const char* value(const  ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd06e69e975881715ULL;
  static const uint64_t static_value2 = 0x6f4795c53bb95594ULL;
};

template<class ContainerAllocator>
struct DataType< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C41_QuasiStaticWalking/QuasiStaticWalkingGoal";
  }

  static const char* value(const  ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
float32[] map\n\
float32[] path\n\
\n\
";
  }

  static const char* value(const  ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.map);
    stream.next(m.path);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QuasiStaticWalkingGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C41_QuasiStaticWalking::QuasiStaticWalkingGoal_<ContainerAllocator> & v) 
  {
    s << indent << "map[]" << std::endl;
    for (size_t i = 0; i < v.map.size(); ++i)
    {
      s << indent << "  map[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.map[i]);
    }
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.path[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C41_QUASISTATICWALKING_MESSAGE_QUASISTATICWALKINGGOAL_H

