"""autogenerated by genpy from C10_Common/mission_selectionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C10_Common.msg

class mission_selectionRequest(genpy.Message):
  _md5sum = "85ba304f9c3d84f98ceeadfd5dfb4612"
  _type = "C10_Common/mission_selectionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C11C11A_LM MSN


================================================================================
MSG: C10_Common/C11C11A_LM
int8 MSN
"""
  __slots__ = ['MSN']
  _slot_types = ['C10_Common/C11C11A_LM']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       MSN

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mission_selectionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.MSN is None:
        self.MSN = C10_Common.msg.C11C11A_LM()
    else:
      self.MSN = C10_Common.msg.C11C11A_LM()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.MSN.MSN))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.MSN is None:
        self.MSN = C10_Common.msg.C11C11A_LM()
      end = 0
      start = end
      end += 1
      (self.MSN.MSN,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.MSN.MSN))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.MSN is None:
        self.MSN = C10_Common.msg.C11C11A_LM()
      end = 0
      start = end
      end += 1
      (self.MSN.MSN,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
"""autogenerated by genpy from C10_Common/mission_selectionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C10_Common.msg

class mission_selectionResponse(genpy.Message):
  _md5sum = "a5e4d9a26cb11bac146f1208d3c7ae9d"
  _type = "C10_Common/mission_selectionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
C11_ACK MES

================================================================================
MSG: C10_Common/C11_ACK
int8 mes
"""
  __slots__ = ['MES']
  _slot_types = ['C10_Common/C11_ACK']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       MES

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mission_selectionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.MES is None:
        self.MES = C10_Common.msg.C11_ACK()
    else:
      self.MES = C10_Common.msg.C11_ACK()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.MES.mes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.MES is None:
        self.MES = C10_Common.msg.C11_ACK()
      end = 0
      start = end
      end += 1
      (self.MES.mes,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.MES.mes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.MES is None:
        self.MES = C10_Common.msg.C11_ACK()
      end = 0
      start = end
      end += 1
      (self.MES.mes,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
class mission_selection(object):
  _type          = 'C10_Common/mission_selection'
  _md5sum = '0af0aca9238d0af0121bb70b98cdacff'
  _request_class  = mission_selectionRequest
  _response_class = mission_selectionResponse
