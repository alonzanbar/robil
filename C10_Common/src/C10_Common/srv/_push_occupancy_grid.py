"""autogenerated by genpy from C10_Common/push_occupancy_gridRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import C22_GroundRecognitionAndMapping.msg

class push_occupancy_gridRequest(genpy.Message):
  _md5sum = "da1e388f678406490bcba1177054f63e"
  _type = "C10_Common/push_occupancy_gridRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C22_GroundRecognitionAndMapping/C22C0_PATH OGD

================================================================================
MSG: C22_GroundRecognitionAndMapping/C22C0_PATH
C22_ROW_TYPE[] row
int32 xOffset
int32 yOffset
geometry_msgs/Point robotPos
geometry_msgs/Point robotOri

================================================================================
MSG: C22_GroundRecognitionAndMapping/C22_ROW_TYPE
C22_MAP_SQUARE[] column
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22_MAP_SQUARE
int32 status
int32 AVAILABLE=0
int32 BLOCKED=1
int32 UNCHARTED=2
C22_PLANE_TYPE[] planes
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22_PLANE_TYPE
float32 x
float32 y
float32 z
float32 d
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['OGD']
  _slot_types = ['C22_GroundRecognitionAndMapping/C22C0_PATH']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       OGD

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(push_occupancy_gridRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.OGD is None:
        self.OGD = C22_GroundRecognitionAndMapping.msg.C22C0_PATH()
    else:
      self.OGD = C22_GroundRecognitionAndMapping.msg.C22C0_PATH()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.OGD.row)
      buff.write(_struct_I.pack(length))
      for val1 in self.OGD.row:
        length = len(val1.column)
        buff.write(_struct_I.pack(length))
        for val2 in val1.column:
          buff.write(_struct_i.pack(val2.status))
          length = len(val2.planes)
          buff.write(_struct_I.pack(length))
          for val3 in val2.planes:
            _x = val3
            buff.write(_struct_4f.pack(_x.x, _x.y, _x.z, _x.d))
      _x = self
      buff.write(_struct_2i6d.pack(_x.OGD.xOffset, _x.OGD.yOffset, _x.OGD.robotPos.x, _x.OGD.robotPos.y, _x.OGD.robotPos.z, _x.OGD.robotOri.x, _x.OGD.robotOri.y, _x.OGD.robotOri.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.OGD is None:
        self.OGD = C22_GroundRecognitionAndMapping.msg.C22C0_PATH()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.OGD.row = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22_ROW_TYPE()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.column = []
        for i in range(0, length):
          val2 = C22_GroundRecognitionAndMapping.msg.C22_MAP_SQUARE()
          start = end
          end += 4
          (val2.status,) = _struct_i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.planes = []
          for i in range(0, length):
            val3 = C22_GroundRecognitionAndMapping.msg.C22_PLANE_TYPE()
            _x = val3
            start = end
            end += 16
            (_x.x, _x.y, _x.z, _x.d,) = _struct_4f.unpack(str[start:end])
            val2.planes.append(val3)
          val1.column.append(val2)
        self.OGD.row.append(val1)
      _x = self
      start = end
      end += 56
      (_x.OGD.xOffset, _x.OGD.yOffset, _x.OGD.robotPos.x, _x.OGD.robotPos.y, _x.OGD.robotPos.z, _x.OGD.robotOri.x, _x.OGD.robotOri.y, _x.OGD.robotOri.z,) = _struct_2i6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.OGD.row)
      buff.write(_struct_I.pack(length))
      for val1 in self.OGD.row:
        length = len(val1.column)
        buff.write(_struct_I.pack(length))
        for val2 in val1.column:
          buff.write(_struct_i.pack(val2.status))
          length = len(val2.planes)
          buff.write(_struct_I.pack(length))
          for val3 in val2.planes:
            _x = val3
            buff.write(_struct_4f.pack(_x.x, _x.y, _x.z, _x.d))
      _x = self
      buff.write(_struct_2i6d.pack(_x.OGD.xOffset, _x.OGD.yOffset, _x.OGD.robotPos.x, _x.OGD.robotPos.y, _x.OGD.robotPos.z, _x.OGD.robotOri.x, _x.OGD.robotOri.y, _x.OGD.robotOri.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.OGD is None:
        self.OGD = C22_GroundRecognitionAndMapping.msg.C22C0_PATH()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.OGD.row = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22_ROW_TYPE()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.column = []
        for i in range(0, length):
          val2 = C22_GroundRecognitionAndMapping.msg.C22_MAP_SQUARE()
          start = end
          end += 4
          (val2.status,) = _struct_i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.planes = []
          for i in range(0, length):
            val3 = C22_GroundRecognitionAndMapping.msg.C22_PLANE_TYPE()
            _x = val3
            start = end
            end += 16
            (_x.x, _x.y, _x.z, _x.d,) = _struct_4f.unpack(str[start:end])
            val2.planes.append(val3)
          val1.column.append(val2)
        self.OGD.row.append(val1)
      _x = self
      start = end
      end += 56
      (_x.OGD.xOffset, _x.OGD.yOffset, _x.OGD.robotPos.x, _x.OGD.robotPos.y, _x.OGD.robotPos.z, _x.OGD.robotOri.x, _x.OGD.robotOri.y, _x.OGD.robotOri.z,) = _struct_2i6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_4f = struct.Struct("<4f")
_struct_2i6d = struct.Struct("<2i6d")
"""autogenerated by genpy from C10_Common/push_occupancy_gridResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C10_Common.msg

class push_occupancy_gridResponse(genpy.Message):
  _md5sum = "7695b7198815300871b8010a1d799036"
  _type = "C10_Common/push_occupancy_gridResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C11_ACK ACK

================================================================================
MSG: C10_Common/C11_ACK
int8 mes
"""
  __slots__ = ['ACK']
  _slot_types = ['C10_Common/C11_ACK']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ACK

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(push_occupancy_gridResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ACK is None:
        self.ACK = C10_Common.msg.C11_ACK()
    else:
      self.ACK = C10_Common.msg.C11_ACK()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.ACK.mes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ACK is None:
        self.ACK = C10_Common.msg.C11_ACK()
      end = 0
      start = end
      end += 1
      (self.ACK.mes,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.ACK.mes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ACK is None:
        self.ACK = C10_Common.msg.C11_ACK()
      end = 0
      start = end
      end += 1
      (self.ACK.mes,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
class push_occupancy_grid(object):
  _type          = 'C10_Common/push_occupancy_grid'
  _md5sum = 'fd7ae2dd9855cd6b21e40a0119363ae7'
  _request_class  = push_occupancy_gridRequest
  _response_class = push_occupancy_gridResponse
