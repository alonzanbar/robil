"""autogenerated by genpy from C10_Common/push_pathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C31_PathPlanner.msg

class push_pathRequest(genpy.Message):
  _md5sum = "0213c25449fcb210f3fdf2341582f00a"
  _type = "C10_Common/push_pathRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C31_PathPlanner/C31_Waypoints PTH

================================================================================
MSG: C31_PathPlanner/C31_Waypoints
C31_PathPlanner/C31_Location[] points
================================================================================
MSG: C31_PathPlanner/C31_Location
float64 x
float64 y
"""
  __slots__ = ['PTH']
  _slot_types = ['C31_PathPlanner/C31_Waypoints']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PTH

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(push_pathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PTH is None:
        self.PTH = C31_PathPlanner.msg.C31_Waypoints()
    else:
      self.PTH = C31_PathPlanner.msg.C31_Waypoints()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.PTH.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.PTH.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.PTH is None:
        self.PTH = C31_PathPlanner.msg.C31_Waypoints()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PTH.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Location()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.PTH.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.PTH.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.PTH.points:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.PTH is None:
        self.PTH = C31_PathPlanner.msg.C31_Waypoints()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PTH.points = []
      for i in range(0, length):
        val1 = C31_PathPlanner.msg.C31_Location()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.PTH.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
"""autogenerated by genpy from C10_Common/push_pathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C10_Common.msg

class push_pathResponse(genpy.Message):
  _md5sum = "7695b7198815300871b8010a1d799036"
  _type = "C10_Common/push_pathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C11_ACK ACK

================================================================================
MSG: C10_Common/C11_ACK
int8 mes
"""
  __slots__ = ['ACK']
  _slot_types = ['C10_Common/C11_ACK']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ACK

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(push_pathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ACK is None:
        self.ACK = C10_Common.msg.C11_ACK()
    else:
      self.ACK = C10_Common.msg.C11_ACK()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.ACK.mes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ACK is None:
        self.ACK = C10_Common.msg.C11_ACK()
      end = 0
      start = end
      end += 1
      (self.ACK.mes,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.ACK.mes))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ACK is None:
        self.ACK = C10_Common.msg.C11_ACK()
      end = 0
      start = end
      end += 1
      (self.ACK.mes,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
class push_path(object):
  _type          = 'C10_Common/push_path'
  _md5sum = '763eb30ff6c79472e909b23f02184141'
  _request_class  = push_pathRequest
  _response_class = push_pathResponse
