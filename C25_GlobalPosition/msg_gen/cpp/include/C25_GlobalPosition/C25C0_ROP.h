/* Auto-generated by genmsg_cpp for file /home/lar2/Desktop/robilworkspace/C25_GlobalPosition/msg/C25C0_ROP.msg */
#ifndef C25_GLOBALPOSITION_MESSAGE_C25C0_ROP_H
#define C25_GLOBALPOSITION_MESSAGE_C25C0_ROP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/Imu.h"
#include "nav_msgs/Odometry.h"

namespace C25_GlobalPosition
{
template <class ContainerAllocator>
struct C25C0_ROP_ {
  typedef C25C0_ROP_<ContainerAllocator> Type;

  C25C0_ROP_()
  : imu()
  , pose()
  {
  }

  C25C0_ROP_(const ContainerAllocator& _alloc)
  : imu(_alloc)
  , pose(_alloc)
  {
  }

  typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _imu_type;
   ::sensor_msgs::Imu_<ContainerAllocator>  imu;

  typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _pose_type;
   ::nav_msgs::Odometry_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C25C0_ROP
typedef  ::C25_GlobalPosition::C25C0_ROP_<std::allocator<void> > C25C0_ROP;

typedef boost::shared_ptr< ::C25_GlobalPosition::C25C0_ROP> C25C0_ROPPtr;
typedef boost::shared_ptr< ::C25_GlobalPosition::C25C0_ROP const> C25C0_ROPConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C25_GlobalPosition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e4eed93e0e6f3ab5332f6960ad63162e";
  }

  static const char* value(const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe4eed93e0e6f3ab5ULL;
  static const uint64_t static_value2 = 0x332f6960ad63162eULL;
};

template<class ContainerAllocator>
struct DataType< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C25_GlobalPosition/C25C0_ROP";
  }

  static const char* value(const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Imu imu\n\
nav_msgs/Odometry pose\n\
================================================================================\n\
MSG: sensor_msgs/Imu\n\
# This is a message to hold data from an IMU (Inertial Measurement Unit)\n\
#\n\
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n\
#\n\
# If the covariance of the measurement is known, it should be filled in (if all you know is the variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n\
# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the data a covariance will have to be assumed or gotten from some other source\n\
#\n\
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation estimate), please set element 0 of the associated covariance matrix to -1\n\
# If you are interpreting this message, please check for a value of -1 in the first element of each covariance matrix, and disregard the associated estimate.\n\
\n\
Header header\n\
\n\
geometry_msgs/Quaternion orientation\n\
float64[9] orientation_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 angular_velocity\n\
float64[9] angular_velocity_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 linear_acceleration\n\
float64[9] linear_acceleration_covariance # Row major x, y z \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertianty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
";
  }

  static const char* value(const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.imu);
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C25C0_ROP_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C25_GlobalPosition::C25C0_ROP_<ContainerAllocator> & v) 
  {
    s << indent << "imu: ";
s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.imu);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C25_GLOBALPOSITION_MESSAGE_C25C0_ROP_H

