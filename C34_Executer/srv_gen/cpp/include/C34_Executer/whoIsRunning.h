/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C34_Executer/srv/whoIsRunning.srv */
#ifndef C34_EXECUTER_SERVICE_WHOISRUNNING_H
#define C34_EXECUTER_SERVICE_WHOISRUNNING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace C34_Executer
{
template <class ContainerAllocator>
struct whoIsRunningRequest_ {
  typedef whoIsRunningRequest_<ContainerAllocator> Type;

  whoIsRunningRequest_()
  {
  }

  whoIsRunningRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct whoIsRunningRequest
typedef  ::C34_Executer::whoIsRunningRequest_<std::allocator<void> > whoIsRunningRequest;

typedef boost::shared_ptr< ::C34_Executer::whoIsRunningRequest> whoIsRunningRequestPtr;
typedef boost::shared_ptr< ::C34_Executer::whoIsRunningRequest const> whoIsRunningRequestConstPtr;


template <class ContainerAllocator>
struct whoIsRunningResponse_ {
  typedef whoIsRunningResponse_<ContainerAllocator> Type;

  whoIsRunningResponse_()
  : runningList()
  {
  }

  whoIsRunningResponse_(const ContainerAllocator& _alloc)
  : runningList(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _runningList_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  runningList;


  typedef boost::shared_ptr< ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C34_Executer::whoIsRunningResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct whoIsRunningResponse
typedef  ::C34_Executer::whoIsRunningResponse_<std::allocator<void> > whoIsRunningResponse;

typedef boost::shared_ptr< ::C34_Executer::whoIsRunningResponse> whoIsRunningResponsePtr;
typedef boost::shared_ptr< ::C34_Executer::whoIsRunningResponse const> whoIsRunningResponseConstPtr;

struct whoIsRunning
{

typedef whoIsRunningRequest Request;
typedef whoIsRunningResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct whoIsRunning
} // namespace C34_Executer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/whoIsRunningRequest";
  }

  static const char* value(const  ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C34_Executer::whoIsRunningResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3195cffe705fdcf5e499ae7b27e958e1";
  }

  static const char* value(const  ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3195cffe705fdcf5ULL;
  static const uint64_t static_value2 = 0xe499ae7b27e958e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/whoIsRunningResponse";
  }

  static const char* value(const  ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string runningList\n\
\n\
";
  }

  static const char* value(const  ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C34_Executer::whoIsRunningRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct whoIsRunningRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C34_Executer::whoIsRunningResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.runningList);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct whoIsRunningResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C34_Executer::whoIsRunning> {
  static const char* value() 
  {
    return "3195cffe705fdcf5e499ae7b27e958e1";
  }

  static const char* value(const C34_Executer::whoIsRunning&) { return value(); } 
};

template<>
struct DataType<C34_Executer::whoIsRunning> {
  static const char* value() 
  {
    return "C34_Executer/whoIsRunning";
  }

  static const char* value(const C34_Executer::whoIsRunning&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C34_Executer::whoIsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3195cffe705fdcf5e499ae7b27e958e1";
  }

  static const char* value(const C34_Executer::whoIsRunningRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C34_Executer::whoIsRunningRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/whoIsRunning";
  }

  static const char* value(const C34_Executer::whoIsRunningRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C34_Executer::whoIsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3195cffe705fdcf5e499ae7b27e958e1";
  }

  static const char* value(const C34_Executer::whoIsRunningResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C34_Executer::whoIsRunningResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C34_Executer/whoIsRunning";
  }

  static const char* value(const C34_Executer::whoIsRunningResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C34_EXECUTER_SERVICE_WHOISRUNNING_H

