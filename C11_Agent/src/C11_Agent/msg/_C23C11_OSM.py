"""autogenerated by genpy from C11_Agent/C23C11_OSM.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C11_Agent.msg

class C23C11_OSM(genpy.Message):
  _md5sum = "8b059a4c6d59e8652df8b326041d42f5"
  _type = "C11_Agent/C23C11_OSM"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 ID
string NAME
C11_Agent/coord EXTR_3D
C11_Agent/coord CNTR
C11_Agent/D3SPACE ORIN
================================================================================
MSG: C11_Agent/coord
float64 X
float64 Y
float64 Z
================================================================================
MSG: C11_Agent/D3SPACE
float64 ROLL
float64 PITCH
float64 YAW
"""
  __slots__ = ['ID','NAME','EXTR_3D','CNTR','ORIN']
  _slot_types = ['int16','string','C11_Agent/coord','C11_Agent/coord','C11_Agent/D3SPACE']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,NAME,EXTR_3D,CNTR,ORIN

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C23C11_OSM, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.NAME is None:
        self.NAME = ''
      if self.EXTR_3D is None:
        self.EXTR_3D = C11_Agent.msg.coord()
      if self.CNTR is None:
        self.CNTR = C11_Agent.msg.coord()
      if self.ORIN is None:
        self.ORIN = C11_Agent.msg.D3SPACE()
    else:
      self.ID = 0
      self.NAME = ''
      self.EXTR_3D = C11_Agent.msg.coord()
      self.CNTR = C11_Agent.msg.coord()
      self.ORIN = C11_Agent.msg.D3SPACE()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_h.pack(self.ID))
      _x = self.NAME
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.EXTR_3D.X, _x.EXTR_3D.Y, _x.EXTR_3D.Z, _x.CNTR.X, _x.CNTR.Y, _x.CNTR.Z, _x.ORIN.ROLL, _x.ORIN.PITCH, _x.ORIN.YAW))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.EXTR_3D is None:
        self.EXTR_3D = C11_Agent.msg.coord()
      if self.CNTR is None:
        self.CNTR = C11_Agent.msg.coord()
      if self.ORIN is None:
        self.ORIN = C11_Agent.msg.D3SPACE()
      end = 0
      start = end
      end += 2
      (self.ID,) = _struct_h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.NAME = str[start:end].decode('utf-8')
      else:
        self.NAME = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.EXTR_3D.X, _x.EXTR_3D.Y, _x.EXTR_3D.Z, _x.CNTR.X, _x.CNTR.Y, _x.CNTR.Z, _x.ORIN.ROLL, _x.ORIN.PITCH, _x.ORIN.YAW,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_h.pack(self.ID))
      _x = self.NAME
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.EXTR_3D.X, _x.EXTR_3D.Y, _x.EXTR_3D.Z, _x.CNTR.X, _x.CNTR.Y, _x.CNTR.Z, _x.ORIN.ROLL, _x.ORIN.PITCH, _x.ORIN.YAW))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.EXTR_3D is None:
        self.EXTR_3D = C11_Agent.msg.coord()
      if self.CNTR is None:
        self.CNTR = C11_Agent.msg.coord()
      if self.ORIN is None:
        self.ORIN = C11_Agent.msg.D3SPACE()
      end = 0
      start = end
      end += 2
      (self.ID,) = _struct_h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.NAME = str[start:end].decode('utf-8')
      else:
        self.NAME = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.EXTR_3D.X, _x.EXTR_3D.Y, _x.EXTR_3D.Z, _x.CNTR.X, _x.CNTR.Y, _x.CNTR.Z, _x.ORIN.ROLL, _x.ORIN.PITCH, _x.ORIN.YAW,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
_struct_9d = struct.Struct("<9d")
