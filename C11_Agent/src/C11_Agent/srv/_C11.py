"""autogenerated by genpy from C11_Agent/C11Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C11_Agent.msg

class C11Request(genpy.Message):
  _md5sum = "2079ad9375ebca583f2641aed492d3e6"
  _type = "C11_Agent/C11Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
C11_Agent/C11C32_PATH  path

================================================================================
MSG: C11_Agent/C11C32_PATH
float64 lat
float64 lon

"""
  __slots__ = ['path']
  _slot_types = ['C11_Agent/C11C32_PATH']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C11Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = C11_Agent.msg.C11C32_PATH()
    else:
      self.path = C11_Agent.msg.C11C32_PATH()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2d.pack(_x.path.lat, _x.path.lon))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path is None:
        self.path = C11_Agent.msg.C11C32_PATH()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.path.lat, _x.path.lon,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2d.pack(_x.path.lat, _x.path.lon))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path is None:
        self.path = C11_Agent.msg.C11C32_PATH()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.path.lat, _x.path.lon,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
"""autogenerated by genpy from C11_Agent/C11Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C11_Agent.msg

class C11Response(genpy.Message):
  _md5sum = "526720cbe1ad1597e15badc0ff49c7bd"
  _type = "C11_Agent/C11Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C11_Agent/C34C11_STT  required_stt
C11_Agent/C32C11_PATH path


================================================================================
MSG: C11_Agent/C34C11_STT
int8 stt


================================================================================
MSG: C11_Agent/C32C11_PATH
float64 lat
float64 lon

"""
  __slots__ = ['required_stt','path']
  _slot_types = ['C11_Agent/C34C11_STT','C11_Agent/C32C11_PATH']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       required_stt,path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C11Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.required_stt is None:
        self.required_stt = C11_Agent.msg.C34C11_STT()
      if self.path is None:
        self.path = C11_Agent.msg.C32C11_PATH()
    else:
      self.required_stt = C11_Agent.msg.C34C11_STT()
      self.path = C11_Agent.msg.C32C11_PATH()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b2d.pack(_x.required_stt.stt, _x.path.lat, _x.path.lon))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.required_stt is None:
        self.required_stt = C11_Agent.msg.C34C11_STT()
      if self.path is None:
        self.path = C11_Agent.msg.C32C11_PATH()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.required_stt.stt, _x.path.lat, _x.path.lon,) = _struct_b2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b2d.pack(_x.required_stt.stt, _x.path.lat, _x.path.lon))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.required_stt is None:
        self.required_stt = C11_Agent.msg.C34C11_STT()
      if self.path is None:
        self.path = C11_Agent.msg.C32C11_PATH()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.required_stt.stt, _x.path.lat, _x.path.lon,) = _struct_b2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b2d = struct.Struct("<b2d")
class C11(object):
  _type          = 'C11_Agent/C11'
  _md5sum = 'ca160abea4d8358e11f4d9c2c371638e'
  _request_class  = C11Request
  _response_class = C11Response
