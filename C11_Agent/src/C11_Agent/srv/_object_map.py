"""autogenerated by genpy from C11_Agent/object_mapRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C11_Agent.msg

class object_mapRequest(genpy.Message):
  _md5sum = "47cc4e9671b58ffc3bf33c91b6870787"
  _type = "C11_Agent/object_mapRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
C11_Agent/C11C23_OBM  obm


================================================================================
MSG: C11_Agent/C11C23_OBM
float64 LAT
int16 SCN
int16 SCN_SCAN=0
int16 SCN_CURRENT=1
int16 MOV
int16 MOV_NONE     = 0
int16 MOV_HEAD     = 1
int16 MOV_POSTURE  = 2
int16 MOV_POSITION = 3
"""
  __slots__ = ['obm']
  _slot_types = ['C11_Agent/C11C23_OBM']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(object_mapRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.obm is None:
        self.obm = C11_Agent.msg.C11C23_OBM()
    else:
      self.obm = C11_Agent.msg.C11C23_OBM()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d2h.pack(_x.obm.LAT, _x.obm.SCN, _x.obm.MOV))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.obm is None:
        self.obm = C11_Agent.msg.C11C23_OBM()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.obm.LAT, _x.obm.SCN, _x.obm.MOV,) = _struct_d2h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d2h.pack(_x.obm.LAT, _x.obm.SCN, _x.obm.MOV))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.obm is None:
        self.obm = C11_Agent.msg.C11C23_OBM()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.obm.LAT, _x.obm.SCN, _x.obm.MOV,) = _struct_d2h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d2h = struct.Struct("<d2h")
"""autogenerated by genpy from C11_Agent/object_mapResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C11_Agent.msg

class object_mapResponse(genpy.Message):
  _md5sum = "6c4ffb214079c9222f0739c076874c9f"
  _type = "C11_Agent/object_mapResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C11_Agent/C23C11_OSM  obm


================================================================================
MSG: C11_Agent/C23C11_OSM
int16 ID
string NAME
C11_Agent/coord EXTR_3D
C11_Agent/coord CNTR
C11_Agent/D3SPACE ORIN
================================================================================
MSG: C11_Agent/coord
float64 X
float64 Y
float64 Z
================================================================================
MSG: C11_Agent/D3SPACE
float64 ROLL
float64 PITCH
float64 YAW
"""
  __slots__ = ['obm']
  _slot_types = ['C11_Agent/C23C11_OSM']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(object_mapResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.obm is None:
        self.obm = C11_Agent.msg.C23C11_OSM()
    else:
      self.obm = C11_Agent.msg.C23C11_OSM()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_h.pack(self.obm.ID))
      _x = self.obm.NAME
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.obm.EXTR_3D.X, _x.obm.EXTR_3D.Y, _x.obm.EXTR_3D.Z, _x.obm.CNTR.X, _x.obm.CNTR.Y, _x.obm.CNTR.Z, _x.obm.ORIN.ROLL, _x.obm.ORIN.PITCH, _x.obm.ORIN.YAW))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.obm is None:
        self.obm = C11_Agent.msg.C23C11_OSM()
      end = 0
      start = end
      end += 2
      (self.obm.ID,) = _struct_h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obm.NAME = str[start:end].decode('utf-8')
      else:
        self.obm.NAME = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.obm.EXTR_3D.X, _x.obm.EXTR_3D.Y, _x.obm.EXTR_3D.Z, _x.obm.CNTR.X, _x.obm.CNTR.Y, _x.obm.CNTR.Z, _x.obm.ORIN.ROLL, _x.obm.ORIN.PITCH, _x.obm.ORIN.YAW,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_h.pack(self.obm.ID))
      _x = self.obm.NAME
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.obm.EXTR_3D.X, _x.obm.EXTR_3D.Y, _x.obm.EXTR_3D.Z, _x.obm.CNTR.X, _x.obm.CNTR.Y, _x.obm.CNTR.Z, _x.obm.ORIN.ROLL, _x.obm.ORIN.PITCH, _x.obm.ORIN.YAW))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.obm is None:
        self.obm = C11_Agent.msg.C23C11_OSM()
      end = 0
      start = end
      end += 2
      (self.obm.ID,) = _struct_h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obm.NAME = str[start:end].decode('utf-8')
      else:
        self.obm.NAME = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.obm.EXTR_3D.X, _x.obm.EXTR_3D.Y, _x.obm.EXTR_3D.Z, _x.obm.CNTR.X, _x.obm.CNTR.Y, _x.obm.CNTR.Z, _x.obm.ORIN.ROLL, _x.obm.ORIN.PITCH, _x.obm.ORIN.YAW,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
_struct_9d = struct.Struct("<9d")
class object_map(object):
  _type          = 'C11_Agent/object_map'
  _md5sum = '135a2212300a3065c3dd01227eabc7d4'
  _request_class  = object_mapRequest
  _response_class = object_mapResponse
