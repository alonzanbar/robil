/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C11_Agent/srv/C11.srv */
#ifndef C11_AGENT_SERVICE_C11_H
#define C11_AGENT_SERVICE_C11_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "C11_Agent/C11C32_PATH.h"


#include "C11_Agent/C34C11_STT.h"
#include "C11_Agent/C32C11_PATH.h"

namespace C11_Agent
{
template <class ContainerAllocator>
struct C11Request_ {
  typedef C11Request_<ContainerAllocator> Type;

  C11Request_()
  : path()
  {
  }

  C11Request_(const ContainerAllocator& _alloc)
  : path(_alloc)
  {
  }

  typedef  ::C11_Agent::C11C32_PATH_<ContainerAllocator>  _path_type;
   ::C11_Agent::C11C32_PATH_<ContainerAllocator>  path;


  typedef boost::shared_ptr< ::C11_Agent::C11Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C11_Agent::C11Request_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C11Request
typedef  ::C11_Agent::C11Request_<std::allocator<void> > C11Request;

typedef boost::shared_ptr< ::C11_Agent::C11Request> C11RequestPtr;
typedef boost::shared_ptr< ::C11_Agent::C11Request const> C11RequestConstPtr;


template <class ContainerAllocator>
struct C11Response_ {
  typedef C11Response_<ContainerAllocator> Type;

  C11Response_()
  : required_stt()
  , path()
  {
  }

  C11Response_(const ContainerAllocator& _alloc)
  : required_stt(_alloc)
  , path(_alloc)
  {
  }

  typedef  ::C11_Agent::C34C11_STT_<ContainerAllocator>  _required_stt_type;
   ::C11_Agent::C34C11_STT_<ContainerAllocator>  required_stt;

  typedef  ::C11_Agent::C32C11_PATH_<ContainerAllocator>  _path_type;
   ::C11_Agent::C32C11_PATH_<ContainerAllocator>  path;


  typedef boost::shared_ptr< ::C11_Agent::C11Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C11_Agent::C11Response_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C11Response
typedef  ::C11_Agent::C11Response_<std::allocator<void> > C11Response;

typedef boost::shared_ptr< ::C11_Agent::C11Response> C11ResponsePtr;
typedef boost::shared_ptr< ::C11_Agent::C11Response const> C11ResponseConstPtr;

struct C11
{

typedef C11Request Request;
typedef C11Response Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct C11
} // namespace C11_Agent

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C11Request_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C11Request_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C11_Agent::C11Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4cb53a3d10efe3f352d6ac9b1a895970";
  }

  static const char* value(const  ::C11_Agent::C11Request_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4cb53a3d10efe3f3ULL;
  static const uint64_t static_value2 = 0x52d6ac9b1a895970ULL;
};

template<class ContainerAllocator>
struct DataType< ::C11_Agent::C11Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/C11Request";
  }

  static const char* value(const  ::C11_Agent::C11Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C11_Agent::C11Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
C11_Agent/C11C32_PATH  path\n\
\n\
\n\
================================================================================\n\
MSG: C11_Agent/C11C32_PATH\n\
C11_Agent/pathLocation[] points\n\
================================================================================\n\
MSG: C11_Agent/pathLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C11_Agent::C11Request_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C11Response_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C11Response_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C11_Agent::C11Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "378ca8ba0e3a1c1cd95b4bedafe59e63";
  }

  static const char* value(const  ::C11_Agent::C11Response_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x378ca8ba0e3a1c1cULL;
  static const uint64_t static_value2 = 0xd95b4bedafe59e63ULL;
};

template<class ContainerAllocator>
struct DataType< ::C11_Agent::C11Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/C11Response";
  }

  static const char* value(const  ::C11_Agent::C11Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C11_Agent::C11Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/C34C11_STT  required_stt\n\
C11_Agent/C32C11_PATH path\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: C11_Agent/C34C11_STT\n\
int8 stt\n\
\n\
\n\
================================================================================\n\
MSG: C11_Agent/C32C11_PATH\n\
C11_Agent/pathLocation[] points\n\
\n\
================================================================================\n\
MSG: C11_Agent/pathLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C11_Agent::C11Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C11_Agent::C11Request_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.path);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C11Request_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C11_Agent::C11Response_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.required_stt);
    stream.next(m.path);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C11Response_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<C11_Agent::C11> {
  static const char* value() 
  {
    return "2b25868799b5fbdec16e1fbe1938b88d";
  }

  static const char* value(const C11_Agent::C11&) { return value(); } 
};

template<>
struct DataType<C11_Agent::C11> {
  static const char* value() 
  {
    return "C11_Agent/C11";
  }

  static const char* value(const C11_Agent::C11&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C11_Agent::C11Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b25868799b5fbdec16e1fbe1938b88d";
  }

  static const char* value(const C11_Agent::C11Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C11_Agent::C11Request_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/C11";
  }

  static const char* value(const C11_Agent::C11Request_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<C11_Agent::C11Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b25868799b5fbdec16e1fbe1938b88d";
  }

  static const char* value(const C11_Agent::C11Response_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<C11_Agent::C11Response_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/C11";
  }

  static const char* value(const C11_Agent::C11Response_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // C11_AGENT_SERVICE_C11_H

