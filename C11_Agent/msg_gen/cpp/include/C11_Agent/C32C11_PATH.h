/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C11_Agent/msg/C32C11_PATH.msg */
#ifndef C11_AGENT_MESSAGE_C32C11_PATH_H
#define C11_AGENT_MESSAGE_C32C11_PATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "C11_Agent/pathLocation.h"

namespace C11_Agent
{
template <class ContainerAllocator>
struct C32C11_PATH_ {
  typedef C32C11_PATH_<ContainerAllocator> Type;

  C32C11_PATH_()
  : points()
  {
  }

  C32C11_PATH_(const ContainerAllocator& _alloc)
  : points(_alloc)
  {
  }

  typedef std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  points;


  typedef boost::shared_ptr< ::C11_Agent::C32C11_PATH_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C11_Agent::C32C11_PATH_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C32C11_PATH
typedef  ::C11_Agent::C32C11_PATH_<std::allocator<void> > C32C11_PATH;

typedef boost::shared_ptr< ::C11_Agent::C32C11_PATH> C32C11_PATHPtr;
typedef boost::shared_ptr< ::C11_Agent::C32C11_PATH const> C32C11_PATHConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C11_Agent::C32C11_PATH_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C11_Agent::C32C11_PATH_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C11_Agent

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C32C11_PATH_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C32C11_PATH_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C11_Agent::C32C11_PATH_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ffd74dfa964a04e3f477faa3684da1c6";
  }

  static const char* value(const  ::C11_Agent::C32C11_PATH_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xffd74dfa964a04e3ULL;
  static const uint64_t static_value2 = 0xf477faa3684da1c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::C11_Agent::C32C11_PATH_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/C32C11_PATH";
  }

  static const char* value(const  ::C11_Agent::C32C11_PATH_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C11_Agent::C32C11_PATH_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/pathLocation[] points\n\
\n\
================================================================================\n\
MSG: C11_Agent/pathLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C11_Agent::C32C11_PATH_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C11_Agent::C32C11_PATH_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C32C11_PATH_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C11_Agent::C32C11_PATH_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C11_Agent::C32C11_PATH_<ContainerAllocator> & v) 
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C11_Agent::pathLocation_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // C11_AGENT_MESSAGE_C32C11_PATH_H

