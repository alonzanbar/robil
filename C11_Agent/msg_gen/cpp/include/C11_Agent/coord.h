/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C11_Agent/msg/coord.msg */
#ifndef C11_AGENT_MESSAGE_COORD_H
#define C11_AGENT_MESSAGE_COORD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C11_Agent
{
template <class ContainerAllocator>
struct coord_ {
  typedef coord_<ContainerAllocator> Type;

  coord_()
  : X(0.0)
  , Y(0.0)
  , Z(0.0)
  {
  }

  coord_(const ContainerAllocator& _alloc)
  : X(0.0)
  , Y(0.0)
  , Z(0.0)
  {
  }

  typedef double _X_type;
  double X;

  typedef double _Y_type;
  double Y;

  typedef double _Z_type;
  double Z;


  typedef boost::shared_ptr< ::C11_Agent::coord_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C11_Agent::coord_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct coord
typedef  ::C11_Agent::coord_<std::allocator<void> > coord;

typedef boost::shared_ptr< ::C11_Agent::coord> coordPtr;
typedef boost::shared_ptr< ::C11_Agent::coord const> coordConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C11_Agent::coord_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C11_Agent::coord_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C11_Agent

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::coord_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::coord_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C11_Agent::coord_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8219583d7802cc50be3e9ab911877ba5";
  }

  static const char* value(const  ::C11_Agent::coord_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8219583d7802cc50ULL;
  static const uint64_t static_value2 = 0xbe3e9ab911877ba5ULL;
};

template<class ContainerAllocator>
struct DataType< ::C11_Agent::coord_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/coord";
  }

  static const char* value(const  ::C11_Agent::coord_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C11_Agent::coord_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 X\n\
float64 Y\n\
float64 Z\n\
";
  }

  static const char* value(const  ::C11_Agent::coord_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C11_Agent::coord_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C11_Agent::coord_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.X);
    stream.next(m.Y);
    stream.next(m.Z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct coord_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C11_Agent::coord_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C11_Agent::coord_<ContainerAllocator> & v) 
  {
    s << indent << "X: ";
    Printer<double>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<double>::stream(s, indent + "  ", v.Y);
    s << indent << "Z: ";
    Printer<double>::stream(s, indent + "  ", v.Z);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C11_AGENT_MESSAGE_COORD_H

