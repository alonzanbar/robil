/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C11_Agent/msg/D3SPACE.msg */
#ifndef C11_AGENT_MESSAGE_D3SPACE_H
#define C11_AGENT_MESSAGE_D3SPACE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C11_Agent
{
template <class ContainerAllocator>
struct D3SPACE_ {
  typedef D3SPACE_<ContainerAllocator> Type;

  D3SPACE_()
  : ROLL(0.0)
  , PITCH(0.0)
  , YAW(0.0)
  {
  }

  D3SPACE_(const ContainerAllocator& _alloc)
  : ROLL(0.0)
  , PITCH(0.0)
  , YAW(0.0)
  {
  }

  typedef double _ROLL_type;
  double ROLL;

  typedef double _PITCH_type;
  double PITCH;

  typedef double _YAW_type;
  double YAW;


  typedef boost::shared_ptr< ::C11_Agent::D3SPACE_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C11_Agent::D3SPACE_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct D3SPACE
typedef  ::C11_Agent::D3SPACE_<std::allocator<void> > D3SPACE;

typedef boost::shared_ptr< ::C11_Agent::D3SPACE> D3SPACEPtr;
typedef boost::shared_ptr< ::C11_Agent::D3SPACE const> D3SPACEConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C11_Agent::D3SPACE_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C11_Agent::D3SPACE_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C11_Agent

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::D3SPACE_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::D3SPACE_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C11_Agent::D3SPACE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5e410119c3186b5dbf9b94f595628907";
  }

  static const char* value(const  ::C11_Agent::D3SPACE_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5e410119c3186b5dULL;
  static const uint64_t static_value2 = 0xbf9b94f595628907ULL;
};

template<class ContainerAllocator>
struct DataType< ::C11_Agent::D3SPACE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/D3SPACE";
  }

  static const char* value(const  ::C11_Agent::D3SPACE_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C11_Agent::D3SPACE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 ROLL\n\
float64 PITCH\n\
float64 YAW\n\
";
  }

  static const char* value(const  ::C11_Agent::D3SPACE_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C11_Agent::D3SPACE_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C11_Agent::D3SPACE_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ROLL);
    stream.next(m.PITCH);
    stream.next(m.YAW);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct D3SPACE_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C11_Agent::D3SPACE_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C11_Agent::D3SPACE_<ContainerAllocator> & v) 
  {
    s << indent << "ROLL: ";
    Printer<double>::stream(s, indent + "  ", v.ROLL);
    s << indent << "PITCH: ";
    Printer<double>::stream(s, indent + "  ", v.PITCH);
    s << indent << "YAW: ";
    Printer<double>::stream(s, indent + "  ", v.YAW);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C11_AGENT_MESSAGE_D3SPACE_H

