/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C11_Agent/msg/C24C11_OSM.msg */
#ifndef C11_AGENT_MESSAGE_C24C11_OSM_H
#define C11_AGENT_MESSAGE_C24C11_OSM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "C11_Agent/coord.h"
#include "C11_Agent/pathLocation.h"
#include "C11_Agent/pathLocation.h"
#include "C11_Agent/coord.h"

namespace C11_Agent
{
template <class ContainerAllocator>
struct C24C11_OSM_ {
  typedef C24C11_OSM_<ContainerAllocator> Type;

  C24C11_OSM_()
  : TYPE(0)
  , ID(0)
  , COM()
  , EXTR_VIS()
  , EXTR_TOP()
  , EXTR_3D()
  {
  }

  C24C11_OSM_(const ContainerAllocator& _alloc)
  : TYPE(0)
  , ID(0)
  , COM(_alloc)
  , EXTR_VIS(_alloc)
  , EXTR_TOP(_alloc)
  , EXTR_3D(_alloc)
  {
  }

  typedef int32_t _TYPE_type;
  int32_t TYPE;

  typedef int16_t _ID_type;
  int16_t ID;

  typedef std::vector< ::C11_Agent::coord_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::coord_<ContainerAllocator> >::other >  _COM_type;
  std::vector< ::C11_Agent::coord_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::coord_<ContainerAllocator> >::other >  COM;

  typedef std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  _EXTR_VIS_type;
  std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  EXTR_VIS;

  typedef std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  _EXTR_TOP_type;
  std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  EXTR_TOP;

  typedef  ::C11_Agent::coord_<ContainerAllocator>  _EXTR_3D_type;
   ::C11_Agent::coord_<ContainerAllocator>  EXTR_3D;

  enum { TYPE_STATIC = 0 };
  enum { TYPE_DYNAMIC = 1 };

  typedef boost::shared_ptr< ::C11_Agent::C24C11_OSM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C11_Agent::C24C11_OSM_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C24C11_OSM
typedef  ::C11_Agent::C24C11_OSM_<std::allocator<void> > C24C11_OSM;

typedef boost::shared_ptr< ::C11_Agent::C24C11_OSM> C24C11_OSMPtr;
typedef boost::shared_ptr< ::C11_Agent::C24C11_OSM const> C24C11_OSMConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C11_Agent::C24C11_OSM_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C11_Agent::C24C11_OSM_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C11_Agent

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C24C11_OSM_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C24C11_OSM_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C11_Agent::C24C11_OSM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9bfebbc3c0618ea996554dd91c71e678";
  }

  static const char* value(const  ::C11_Agent::C24C11_OSM_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9bfebbc3c0618ea9ULL;
  static const uint64_t static_value2 = 0x96554dd91c71e678ULL;
};

template<class ContainerAllocator>
struct DataType< ::C11_Agent::C24C11_OSM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/C24C11_OSM";
  }

  static const char* value(const  ::C11_Agent::C24C11_OSM_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C11_Agent::C24C11_OSM_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 TYPE\n\
int32 TYPE_STATIC  = 0\n\
int32 TYPE_DYNAMIC = 1\n\
int16 ID\n\
C11_Agent/coord[] COM\n\
C11_Agent/pathLocation[] EXTR_VIS\n\
C11_Agent/pathLocation[] EXTR_TOP\n\
C11_Agent/coord EXTR_3D\n\
================================================================================\n\
MSG: C11_Agent/coord\n\
float64 X\n\
float64 Y\n\
float64 Z\n\
================================================================================\n\
MSG: C11_Agent/pathLocation\n\
float64 lat\n\
float64 lon\n\
";
  }

  static const char* value(const  ::C11_Agent::C24C11_OSM_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C11_Agent::C24C11_OSM_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.TYPE);
    stream.next(m.ID);
    stream.next(m.COM);
    stream.next(m.EXTR_VIS);
    stream.next(m.EXTR_TOP);
    stream.next(m.EXTR_3D);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C24C11_OSM_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C11_Agent::C24C11_OSM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C11_Agent::C24C11_OSM_<ContainerAllocator> & v) 
  {
    s << indent << "TYPE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TYPE);
    s << indent << "ID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ID);
    s << indent << "COM[]" << std::endl;
    for (size_t i = 0; i < v.COM.size(); ++i)
    {
      s << indent << "  COM[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C11_Agent::coord_<ContainerAllocator> >::stream(s, indent + "    ", v.COM[i]);
    }
    s << indent << "EXTR_VIS[]" << std::endl;
    for (size_t i = 0; i < v.EXTR_VIS.size(); ++i)
    {
      s << indent << "  EXTR_VIS[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C11_Agent::pathLocation_<ContainerAllocator> >::stream(s, indent + "    ", v.EXTR_VIS[i]);
    }
    s << indent << "EXTR_TOP[]" << std::endl;
    for (size_t i = 0; i < v.EXTR_TOP.size(); ++i)
    {
      s << indent << "  EXTR_TOP[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C11_Agent::pathLocation_<ContainerAllocator> >::stream(s, indent + "    ", v.EXTR_TOP[i]);
    }
    s << indent << "EXTR_3D: ";
s << std::endl;
    Printer< ::C11_Agent::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.EXTR_3D);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C11_AGENT_MESSAGE_C24C11_OSM_H

