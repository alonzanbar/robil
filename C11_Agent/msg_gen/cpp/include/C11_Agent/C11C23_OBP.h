/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C11_Agent/msg/C11C23_OBP.msg */
#ifndef C11_AGENT_MESSAGE_C11C23_OBP_H
#define C11_AGENT_MESSAGE_C11C23_OBP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "C11_Agent/pathLocation.h"
#include "C11_Agent/pathLocation.h"
#include "C11_Agent/D3SPACE.h"

namespace C11_Agent
{
template <class ContainerAllocator>
struct C11C23_OBP_ {
  typedef C11C23_OBP_<ContainerAllocator> Type;

  C11C23_OBP_()
  : ACT(0)
  , FRZ(0)
  , ID(0)
  , NAME()
  , EXTR_VIS()
  , EXTR_TOP()
  , ORI()
  {
  }

  C11C23_OBP_(const ContainerAllocator& _alloc)
  : ACT(0)
  , FRZ(0)
  , ID(0)
  , NAME(_alloc)
  , EXTR_VIS(_alloc)
  , EXTR_TOP(_alloc)
  , ORI(_alloc)
  {
  }

  typedef int16_t _ACT_type;
  int16_t ACT;

  typedef int16_t _FRZ_type;
  int16_t FRZ;

  typedef int16_t _ID_type;
  int16_t ID;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _NAME_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAME;

  typedef std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  _EXTR_VIS_type;
  std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  EXTR_VIS;

  typedef std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  _EXTR_TOP_type;
  std::vector< ::C11_Agent::pathLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::C11_Agent::pathLocation_<ContainerAllocator> >::other >  EXTR_TOP;

  typedef  ::C11_Agent::D3SPACE_<ContainerAllocator>  _ORI_type;
   ::C11_Agent::D3SPACE_<ContainerAllocator>  ORI;

  enum { ACT_MODIFIED = 0 };
  enum { ACT_NEW = 1 };
  enum { FRZ_KEEP = 0 };
  enum { ACT_RETRY = 1 };

  typedef boost::shared_ptr< ::C11_Agent::C11C23_OBP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C11_Agent::C11C23_OBP_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C11C23_OBP
typedef  ::C11_Agent::C11C23_OBP_<std::allocator<void> > C11C23_OBP;

typedef boost::shared_ptr< ::C11_Agent::C11C23_OBP> C11C23_OBPPtr;
typedef boost::shared_ptr< ::C11_Agent::C11C23_OBP const> C11C23_OBPConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C11_Agent::C11C23_OBP_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C11_Agent::C11C23_OBP_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C11_Agent

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C11C23_OBP_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C11_Agent::C11C23_OBP_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C11_Agent::C11C23_OBP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff2662649f64159b448d8453ec2a31d6";
  }

  static const char* value(const  ::C11_Agent::C11C23_OBP_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xff2662649f64159bULL;
  static const uint64_t static_value2 = 0x448d8453ec2a31d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::C11_Agent::C11C23_OBP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C11_Agent/C11C23_OBP";
  }

  static const char* value(const  ::C11_Agent::C11C23_OBP_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C11_Agent::C11C23_OBP_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 ACT\n\
int16 ACT_MODIFIED = 0\n\
int16 ACT_NEW      = 1\n\
int16 FRZ\n\
int16 FRZ_KEEP  = 0\n\
int16 ACT_RETRY = 1\n\
int16 ID\n\
string NAME\n\
C11_Agent/pathLocation[] EXTR_VIS\n\
C11_Agent/pathLocation[] EXTR_TOP\n\
C11_Agent/D3SPACE ORI\n\
================================================================================\n\
MSG: C11_Agent/pathLocation\n\
float64 lat\n\
float64 lon\n\
================================================================================\n\
MSG: C11_Agent/D3SPACE\n\
float64 ROLL\n\
float64 PITCH\n\
float64 YAW\n\
";
  }

  static const char* value(const  ::C11_Agent::C11C23_OBP_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C11_Agent::C11C23_OBP_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ACT);
    stream.next(m.FRZ);
    stream.next(m.ID);
    stream.next(m.NAME);
    stream.next(m.EXTR_VIS);
    stream.next(m.EXTR_TOP);
    stream.next(m.ORI);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C11C23_OBP_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C11_Agent::C11C23_OBP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C11_Agent::C11C23_OBP_<ContainerAllocator> & v) 
  {
    s << indent << "ACT: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ACT);
    s << indent << "FRZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.FRZ);
    s << indent << "ID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ID);
    s << indent << "NAME: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.NAME);
    s << indent << "EXTR_VIS[]" << std::endl;
    for (size_t i = 0; i < v.EXTR_VIS.size(); ++i)
    {
      s << indent << "  EXTR_VIS[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C11_Agent::pathLocation_<ContainerAllocator> >::stream(s, indent + "    ", v.EXTR_VIS[i]);
    }
    s << indent << "EXTR_TOP[]" << std::endl;
    for (size_t i = 0; i < v.EXTR_TOP.size(); ++i)
    {
      s << indent << "  EXTR_TOP[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::C11_Agent::pathLocation_<ContainerAllocator> >::stream(s, indent + "    ", v.EXTR_TOP[i]);
    }
    s << indent << "ORI: ";
s << std::endl;
    Printer< ::C11_Agent::D3SPACE_<ContainerAllocator> >::stream(s, indent + "  ", v.ORI);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C11_AGENT_MESSAGE_C11C23_OBP_H

