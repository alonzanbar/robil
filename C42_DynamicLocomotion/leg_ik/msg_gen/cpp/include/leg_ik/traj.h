/* Auto-generated by genmsg_cpp for file /home/darpa/rosworkspace/leg_ik/msg/traj.msg */
#ifndef LEG_IK_MESSAGE_TRAJ_H
#define LEG_IK_MESSAGE_TRAJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace leg_ik
{
template <class ContainerAllocator>
struct traj_ {
  typedef traj_<ContainerAllocator> Type;

  traj_()
  : COMx(0.0)
  , COMy(0.0)
  , COMz(0.0)
  , Swing_x(0.0)
  , Swing_y(0.0)
  , Swing_z(0.0)
  , leg(0)
  {
  }

  traj_(const ContainerAllocator& _alloc)
  : COMx(0.0)
  , COMy(0.0)
  , COMz(0.0)
  , Swing_x(0.0)
  , Swing_y(0.0)
  , Swing_z(0.0)
  , leg(0)
  {
  }

  typedef double _COMx_type;
  double COMx;

  typedef double _COMy_type;
  double COMy;

  typedef double _COMz_type;
  double COMz;

  typedef double _Swing_x_type;
  double Swing_x;

  typedef double _Swing_y_type;
  double Swing_y;

  typedef double _Swing_z_type;
  double Swing_z;

  typedef int32_t _leg_type;
  int32_t leg;


  typedef boost::shared_ptr< ::leg_ik::traj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leg_ik::traj_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct traj
typedef  ::leg_ik::traj_<std::allocator<void> > traj;

typedef boost::shared_ptr< ::leg_ik::traj> trajPtr;
typedef boost::shared_ptr< ::leg_ik::traj const> trajConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::leg_ik::traj_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::leg_ik::traj_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace leg_ik

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::leg_ik::traj_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::leg_ik::traj_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::leg_ik::traj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ec2ca23b0e126f2f1c1263a9a369c4b";
  }

  static const char* value(const  ::leg_ik::traj_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5ec2ca23b0e126f2ULL;
  static const uint64_t static_value2 = 0xf1c1263a9a369c4bULL;
};

template<class ContainerAllocator>
struct DataType< ::leg_ik::traj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "leg_ik/traj";
  }

  static const char* value(const  ::leg_ik::traj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::leg_ik::traj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 COMx\n\
float64 COMy\n\
float64 COMz\n\
float64 Swing_x\n\
float64 Swing_y\n\
float64 Swing_z\n\
int32   leg\n\
\n\
";
  }

  static const char* value(const  ::leg_ik::traj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::leg_ik::traj_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::leg_ik::traj_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.COMx);
    stream.next(m.COMy);
    stream.next(m.COMz);
    stream.next(m.Swing_x);
    stream.next(m.Swing_y);
    stream.next(m.Swing_z);
    stream.next(m.leg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct traj_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leg_ik::traj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::leg_ik::traj_<ContainerAllocator> & v) 
  {
    s << indent << "COMx: ";
    Printer<double>::stream(s, indent + "  ", v.COMx);
    s << indent << "COMy: ";
    Printer<double>::stream(s, indent + "  ", v.COMy);
    s << indent << "COMz: ";
    Printer<double>::stream(s, indent + "  ", v.COMz);
    s << indent << "Swing_x: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_x);
    s << indent << "Swing_y: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_y);
    s << indent << "Swing_z: ";
    Printer<double>::stream(s, indent + "  ", v.Swing_z);
    s << indent << "leg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.leg);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LEG_IK_MESSAGE_TRAJ_H

