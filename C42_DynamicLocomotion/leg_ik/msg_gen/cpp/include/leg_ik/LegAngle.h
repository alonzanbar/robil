/* Auto-generated by genmsg_cpp for file /home/darpa/rosworkspace/leg_ik/msg/LegAngle.msg */
#ifndef LEG_IK_MESSAGE_LEGANGLE_H
#define LEG_IK_MESSAGE_LEGANGLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace leg_ik
{
template <class ContainerAllocator>
struct LegAngle_ {
  typedef LegAngle_<ContainerAllocator> Type;

  LegAngle_()
  : mhx(0.0)
  , lhy(0.0)
  , uhz(0.0)
  , kny(0.0)
  , lax(0.0)
  , uay(0.0)
  , mby(0.0)
  , ubx(0.0)
  {
  }

  LegAngle_(const ContainerAllocator& _alloc)
  : mhx(0.0)
  , lhy(0.0)
  , uhz(0.0)
  , kny(0.0)
  , lax(0.0)
  , uay(0.0)
  , mby(0.0)
  , ubx(0.0)
  {
  }

  typedef double _mhx_type;
  double mhx;

  typedef double _lhy_type;
  double lhy;

  typedef double _uhz_type;
  double uhz;

  typedef double _kny_type;
  double kny;

  typedef double _lax_type;
  double lax;

  typedef double _uay_type;
  double uay;

  typedef double _mby_type;
  double mby;

  typedef double _ubx_type;
  double ubx;


  typedef boost::shared_ptr< ::leg_ik::LegAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leg_ik::LegAngle_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LegAngle
typedef  ::leg_ik::LegAngle_<std::allocator<void> > LegAngle;

typedef boost::shared_ptr< ::leg_ik::LegAngle> LegAnglePtr;
typedef boost::shared_ptr< ::leg_ik::LegAngle const> LegAngleConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::leg_ik::LegAngle_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::leg_ik::LegAngle_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace leg_ik

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::leg_ik::LegAngle_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::leg_ik::LegAngle_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::leg_ik::LegAngle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1d76d2a214e8a6ad77f94d476f75a48c";
  }

  static const char* value(const  ::leg_ik::LegAngle_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1d76d2a214e8a6adULL;
  static const uint64_t static_value2 = 0x77f94d476f75a48cULL;
};

template<class ContainerAllocator>
struct DataType< ::leg_ik::LegAngle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "leg_ik/LegAngle";
  }

  static const char* value(const  ::leg_ik::LegAngle_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::leg_ik::LegAngle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 mhx\n\
float64 lhy\n\
float64 uhz\n\
float64 kny\n\
float64 lax\n\
float64 uay\n\
float64 mby\n\
float64 ubx\n\
\n\
";
  }

  static const char* value(const  ::leg_ik::LegAngle_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::leg_ik::LegAngle_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::leg_ik::LegAngle_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mhx);
    stream.next(m.lhy);
    stream.next(m.uhz);
    stream.next(m.kny);
    stream.next(m.lax);
    stream.next(m.uay);
    stream.next(m.mby);
    stream.next(m.ubx);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LegAngle_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leg_ik::LegAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::leg_ik::LegAngle_<ContainerAllocator> & v) 
  {
    s << indent << "mhx: ";
    Printer<double>::stream(s, indent + "  ", v.mhx);
    s << indent << "lhy: ";
    Printer<double>::stream(s, indent + "  ", v.lhy);
    s << indent << "uhz: ";
    Printer<double>::stream(s, indent + "  ", v.uhz);
    s << indent << "kny: ";
    Printer<double>::stream(s, indent + "  ", v.kny);
    s << indent << "lax: ";
    Printer<double>::stream(s, indent + "  ", v.lax);
    s << indent << "uay: ";
    Printer<double>::stream(s, indent + "  ", v.uay);
    s << indent << "mby: ";
    Printer<double>::stream(s, indent + "  ", v.mby);
    s << indent << "ubx: ";
    Printer<double>::stream(s, indent + "  ", v.ubx);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LEG_IK_MESSAGE_LEGANGLE_H

