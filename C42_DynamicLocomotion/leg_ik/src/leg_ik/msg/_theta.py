"""autogenerated by genpy from leg_ik/theta.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class theta(genpy.Message):
  _md5sum = "391bbff06935350249c90820bf19dc59"
  _type = "leg_ik/theta"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 uhx
float64 lhy
float64 mhz
float64 kny
float64 uax
float64 lay
"""
  __slots__ = ['uhx','lhy','mhz','kny','uax','lay']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       uhx,lhy,mhz,kny,uax,lay

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(theta, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.uhx is None:
        self.uhx = 0.
      if self.lhy is None:
        self.lhy = 0.
      if self.mhz is None:
        self.mhz = 0.
      if self.kny is None:
        self.kny = 0.
      if self.uax is None:
        self.uax = 0.
      if self.lay is None:
        self.lay = 0.
    else:
      self.uhx = 0.
      self.lhy = 0.
      self.mhz = 0.
      self.kny = 0.
      self.uax = 0.
      self.lay = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.uhx, _x.lhy, _x.mhz, _x.kny, _x.uax, _x.lay))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.uhx, _x.lhy, _x.mhz, _x.kny, _x.uax, _x.lay,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.uhx, _x.lhy, _x.mhz, _x.kny, _x.uax, _x.lay))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.uhx, _x.lhy, _x.mhz, _x.kny, _x.uax, _x.lay,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
