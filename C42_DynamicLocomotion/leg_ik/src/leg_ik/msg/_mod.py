"""autogenerated by genpy from leg_ik/mod.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import leg_ik.msg

class mod(genpy.Message):
  _md5sum = "089a5acb5e6f9248e95fd50db47c36f7"
  _type = "leg_ik/mod"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """leg_ik/LegPosition pos
int32 legnum
================================================================================
MSG: leg_ik/LegPosition
float64 x
float64 y
float64 z
float64 r
float64 p
float64 w
"""
  __slots__ = ['pos','legnum']
  _slot_types = ['leg_ik/LegPosition','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos,legnum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mod, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pos is None:
        self.pos = leg_ik.msg.LegPosition()
      if self.legnum is None:
        self.legnum = 0
    else:
      self.pos = leg_ik.msg.LegPosition()
      self.legnum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6di.pack(_x.pos.x, _x.pos.y, _x.pos.z, _x.pos.r, _x.pos.p, _x.pos.w, _x.legnum))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pos is None:
        self.pos = leg_ik.msg.LegPosition()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.pos.x, _x.pos.y, _x.pos.z, _x.pos.r, _x.pos.p, _x.pos.w, _x.legnum,) = _struct_6di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6di.pack(_x.pos.x, _x.pos.y, _x.pos.z, _x.pos.r, _x.pos.p, _x.pos.w, _x.legnum))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pos is None:
        self.pos = leg_ik.msg.LegPosition()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.pos.x, _x.pos.y, _x.pos.z, _x.pos.r, _x.pos.p, _x.pos.w, _x.legnum,) = _struct_6di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6di = struct.Struct("<6di")
