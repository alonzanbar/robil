"""autogenerated by genpy from leg_ik/LegIkInitRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import leg_ik.msg

class LegIkInitRequest(genpy.Message):
  _md5sum = "e199d522e509fc3ab2b108c764fa0e52"
  _type = "leg_ik/LegIkInitRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """leg_ik/traj pos

================================================================================
MSG: leg_ik/traj
float64 COMx
float64 COMy
float64 COMz
float64 Swing_x
float64 Swing_y
float64 Swing_z
int32   leg

"""
  __slots__ = ['pos']
  _slot_types = ['leg_ik/traj']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LegIkInitRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pos is None:
        self.pos = leg_ik.msg.traj()
    else:
      self.pos = leg_ik.msg.traj()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6di.pack(_x.pos.COMx, _x.pos.COMy, _x.pos.COMz, _x.pos.Swing_x, _x.pos.Swing_y, _x.pos.Swing_z, _x.pos.leg))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pos is None:
        self.pos = leg_ik.msg.traj()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.pos.COMx, _x.pos.COMy, _x.pos.COMz, _x.pos.Swing_x, _x.pos.Swing_y, _x.pos.Swing_z, _x.pos.leg,) = _struct_6di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6di.pack(_x.pos.COMx, _x.pos.COMy, _x.pos.COMz, _x.pos.Swing_x, _x.pos.Swing_y, _x.pos.Swing_z, _x.pos.leg))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pos is None:
        self.pos = leg_ik.msg.traj()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.pos.COMx, _x.pos.COMy, _x.pos.COMz, _x.pos.Swing_x, _x.pos.Swing_y, _x.pos.Swing_z, _x.pos.leg,) = _struct_6di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6di = struct.Struct("<6di")
"""autogenerated by genpy from leg_ik/LegIkInitResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import leg_ik.msg

class LegIkInitResponse(genpy.Message):
  _md5sum = "328a48585f80aa570f8bf4ab43f39a9f"
  _type = "leg_ik/LegIkInitResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """leg_ik/LegAngle ang


================================================================================
MSG: leg_ik/LegAngle
float64 mhx
float64 lhy
float64 uhz
float64 kny
float64 lax
float64 uay
float64 mby
float64 ubx

"""
  __slots__ = ['ang']
  _slot_types = ['leg_ik/LegAngle']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ang

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LegIkInitResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ang is None:
        self.ang = leg_ik.msg.LegAngle()
    else:
      self.ang = leg_ik.msg.LegAngle()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8d.pack(_x.ang.mhx, _x.ang.lhy, _x.ang.uhz, _x.ang.kny, _x.ang.lax, _x.ang.uay, _x.ang.mby, _x.ang.ubx))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ang is None:
        self.ang = leg_ik.msg.LegAngle()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.ang.mhx, _x.ang.lhy, _x.ang.uhz, _x.ang.kny, _x.ang.lax, _x.ang.uay, _x.ang.mby, _x.ang.ubx,) = _struct_8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8d.pack(_x.ang.mhx, _x.ang.lhy, _x.ang.uhz, _x.ang.kny, _x.ang.lax, _x.ang.uay, _x.ang.mby, _x.ang.ubx))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ang is None:
        self.ang = leg_ik.msg.LegAngle()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.ang.mhx, _x.ang.lhy, _x.ang.uhz, _x.ang.kny, _x.ang.lax, _x.ang.uay, _x.ang.mby, _x.ang.ubx,) = _struct_8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8d = struct.Struct("<8d")
class LegIkInit(object):
  _type          = 'leg_ik/LegIkInit'
  _md5sum = 'b11527b1e6596cdbc96c7b94f75be9c7'
  _request_class  = LegIkInitRequest
  _response_class = LegIkInitResponse
