"""autogenerated by genpy from leg_ik/leg_ikRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class leg_ikRequest(genpy.Message):
  _md5sum = "c5166234939ddbad7844e2026f79c5fa"
  _type = "leg_ik/leg_ikRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Float64 x
std_msgs/Float64 y
std_msgs/Float64 z


================================================================================
MSG: std_msgs/Float64
float64 data
"""
  __slots__ = ['x','y','z']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(leg_ikRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
    else:
      self.x = std_msgs.msg.Float64()
      self.y = std_msgs.msg.Float64()
      self.z = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.x.data, _x.y.data, _x.z.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x.data, _x.y.data, _x.z.data,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.x.data, _x.y.data, _x.z.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x.data, _x.y.data, _x.z.data,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from leg_ik/leg_ikResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class leg_ikResponse(genpy.Message):
  _md5sum = "4cde1d92d566cb6d8d472b7c0438446e"
  _type = "leg_ik/leg_ikResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
std_msgs/Float64 lhy
std_msgs/Float64 kny


================================================================================
MSG: std_msgs/Float64
float64 data
"""
  __slots__ = ['lhy','kny']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lhy,kny

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(leg_ikResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lhy is None:
        self.lhy = std_msgs.msg.Float64()
      if self.kny is None:
        self.kny = std_msgs.msg.Float64()
    else:
      self.lhy = std_msgs.msg.Float64()
      self.kny = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2d.pack(_x.lhy.data, _x.kny.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.lhy is None:
        self.lhy = std_msgs.msg.Float64()
      if self.kny is None:
        self.kny = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.lhy.data, _x.kny.data,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2d.pack(_x.lhy.data, _x.kny.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.lhy is None:
        self.lhy = std_msgs.msg.Float64()
      if self.kny is None:
        self.kny = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.lhy.data, _x.kny.data,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
class leg_ik(object):
  _type          = 'leg_ik/leg_ik'
  _md5sum = '27eb73d765a10ce0f3041c6a90ba018d'
  _request_class  = leg_ikRequest
  _response_class = leg_ikResponse
