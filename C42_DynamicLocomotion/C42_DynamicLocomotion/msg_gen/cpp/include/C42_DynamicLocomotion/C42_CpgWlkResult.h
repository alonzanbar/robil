/* Auto-generated by genmsg_cpp for file /home/darpa/Projects/Robil/C42_DynamicLocomotion/msg/C42_CpgWlkResult.msg */
#ifndef C42_DYNAMICLOCOMOTION_MESSAGE_C42_CPGWLKRESULT_H
#define C42_DYNAMICLOCOMOTION_MESSAGE_C42_CPGWLKRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose2D.h"

namespace C42_DynamicLocomotion
{
template <class ContainerAllocator>
struct C42_CpgWlkResult_ {
  typedef C42_CpgWlkResult_<ContainerAllocator> Type;

  C42_CpgWlkResult_()
  : res_pos()
  , dis(0.0)
  {
  }

  C42_CpgWlkResult_(const ContainerAllocator& _alloc)
  : res_pos(_alloc)
  , dis(0.0)
  {
  }

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _res_pos_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  res_pos;

  typedef double _dis_type;
  double dis;


  typedef boost::shared_ptr< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C42_CpgWlkResult
typedef  ::C42_DynamicLocomotion::C42_CpgWlkResult_<std::allocator<void> > C42_CpgWlkResult;

typedef boost::shared_ptr< ::C42_DynamicLocomotion::C42_CpgWlkResult> C42_CpgWlkResultPtr;
typedef boost::shared_ptr< ::C42_DynamicLocomotion::C42_CpgWlkResult const> C42_CpgWlkResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C42_DynamicLocomotion

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5848ac75ba53676c1e281e5af0ae2de3";
  }

  static const char* value(const  ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5848ac75ba53676cULL;
  static const uint64_t static_value2 = 0x1e281e5af0ae2de3ULL;
};

template<class ContainerAllocator>
struct DataType< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C42_DynamicLocomotion/C42_CpgWlkResult";
  }

  static const char* value(const  ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#current position and orientation\n\
geometry_msgs/Pose2D res_pos\n\
float64 dis\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.res_pos);
    stream.next(m.dis);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C42_CpgWlkResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C42_DynamicLocomotion::C42_CpgWlkResult_<ContainerAllocator> & v) 
  {
    s << indent << "res_pos: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.res_pos);
    s << indent << "dis: ";
    Printer<double>::stream(s, indent + "  ", v.dis);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C42_DYNAMICLOCOMOTION_MESSAGE_C42_CPGWLKRESULT_H

