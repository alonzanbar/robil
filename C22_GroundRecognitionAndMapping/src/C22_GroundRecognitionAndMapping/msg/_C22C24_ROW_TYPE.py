"""autogenerated by genpy from C22_GroundRecognitionAndMapping/C22C24_ROW_TYPE.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C22_GroundRecognitionAndMapping.msg

class C22C24_ROW_TYPE(genpy.Message):
  _md5sum = "97379770f9038e7a07b34ae9866aa1dc"
  _type = "C22_GroundRecognitionAndMapping/C22C24_ROW_TYPE"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C22C24_MAP_SQUARE[] column
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22C24_MAP_SQUARE
int32 status
int32 AVAILABLE=0
int32 BLOCKED=1
int32 UNCHARTED=2
float32 height
"""
  __slots__ = ['column']
  _slot_types = ['C22_GroundRecognitionAndMapping/C22C24_MAP_SQUARE[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       column

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C22C24_ROW_TYPE, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.column is None:
        self.column = []
    else:
      self.column = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.column)
      buff.write(_struct_I.pack(length))
      for val1 in self.column:
        _x = val1
        buff.write(_struct_if.pack(_x.status, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.column is None:
        self.column = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.column = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22C24_MAP_SQUARE()
        _x = val1
        start = end
        end += 8
        (_x.status, _x.height,) = _struct_if.unpack(str[start:end])
        self.column.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.column)
      buff.write(_struct_I.pack(length))
      for val1 in self.column:
        _x = val1
        buff.write(_struct_if.pack(_x.status, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.column is None:
        self.column = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.column = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22C24_MAP_SQUARE()
        _x = val1
        start = end
        end += 8
        (_x.status, _x.height,) = _struct_if.unpack(str[start:end])
        self.column.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_if = struct.Struct("<if")
