"""autogenerated by genpy from C22_GroundRecognitionAndMapping/C22_MAP_SQUARE.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C22_GroundRecognitionAndMapping.msg

class C22_MAP_SQUARE(genpy.Message):
  _md5sum = "6af55b526f18e897e33975360f0aec60"
  _type = "C22_GroundRecognitionAndMapping/C22_MAP_SQUARE"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 status
int32 AVAILABLE=0
int32 BLOCKED=1
int32 UNCHARTED=2
C22_PLANE_TYPE[] planes
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22_PLANE_TYPE
float32 x
float32 y
float32 z
float32 d
"""
  # Pseudo-constants
  AVAILABLE = 0
  BLOCKED = 1
  UNCHARTED = 2

  __slots__ = ['status','planes']
  _slot_types = ['int32','C22_GroundRecognitionAndMapping/C22_PLANE_TYPE[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,planes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C22_MAP_SQUARE, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.planes is None:
        self.planes = []
    else:
      self.status = 0
      self.planes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.status))
      length = len(self.planes)
      buff.write(_struct_I.pack(length))
      for val1 in self.planes:
        _x = val1
        buff.write(_struct_4f.pack(_x.x, _x.y, _x.z, _x.d))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.planes is None:
        self.planes = None
      end = 0
      start = end
      end += 4
      (self.status,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planes = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22_PLANE_TYPE()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.z, _x.d,) = _struct_4f.unpack(str[start:end])
        self.planes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.status))
      length = len(self.planes)
      buff.write(_struct_I.pack(length))
      for val1 in self.planes:
        _x = val1
        buff.write(_struct_4f.pack(_x.x, _x.y, _x.z, _x.d))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.planes is None:
        self.planes = None
      end = 0
      start = end
      end += 4
      (self.status,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planes = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22_PLANE_TYPE()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.z, _x.d,) = _struct_4f.unpack(str[start:end])
        self.planes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_4f = struct.Struct("<4f")
