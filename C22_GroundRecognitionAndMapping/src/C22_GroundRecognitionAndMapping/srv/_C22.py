"""autogenerated by genpy from C22_GroundRecognitionAndMapping/C22Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class C22Request(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "C22_GroundRecognitionAndMapping/C22Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C22Request, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from C22_GroundRecognitionAndMapping/C22Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import C22_GroundRecognitionAndMapping.msg

class C22Response(genpy.Message):
  _md5sum = "9219f21fa47a24a288c5b9136192062b"
  _type = "C22_GroundRecognitionAndMapping/C22Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C22_GroundRecognitionAndMapping/C22C0_PATH drivingPath


================================================================================
MSG: C22_GroundRecognitionAndMapping/C22C0_PATH
C22_ROW_TYPE[] row
int32 xOffset
int32 yOffset
geometry_msgs/Point robotPos
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22_ROW_TYPE
C22_MAP_SQUARE[] column
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22_MAP_SQUARE
int32 status
int32 AVAILABLE=0
int32 BLOCKED=1
int32 UNCHARTED=2
C22_PLANE_TYPE[] planes
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22_PLANE_TYPE
float32 x
float32 y
float32 z
float32 d
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['drivingPath']
  _slot_types = ['C22_GroundRecognitionAndMapping/C22C0_PATH']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drivingPath

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C22Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.drivingPath is None:
        self.drivingPath = C22_GroundRecognitionAndMapping.msg.C22C0_PATH()
    else:
      self.drivingPath = C22_GroundRecognitionAndMapping.msg.C22C0_PATH()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.drivingPath.row)
      buff.write(_struct_I.pack(length))
      for val1 in self.drivingPath.row:
        length = len(val1.column)
        buff.write(_struct_I.pack(length))
        for val2 in val1.column:
          buff.write(_struct_i.pack(val2.status))
          length = len(val2.planes)
          buff.write(_struct_I.pack(length))
          for val3 in val2.planes:
            _x = val3
            buff.write(_struct_4f.pack(_x.x, _x.y, _x.z, _x.d))
      _x = self
      buff.write(_struct_2i3d.pack(_x.drivingPath.xOffset, _x.drivingPath.yOffset, _x.drivingPath.robotPos.x, _x.drivingPath.robotPos.y, _x.drivingPath.robotPos.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.drivingPath is None:
        self.drivingPath = C22_GroundRecognitionAndMapping.msg.C22C0_PATH()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drivingPath.row = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22_ROW_TYPE()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.column = []
        for i in range(0, length):
          val2 = C22_GroundRecognitionAndMapping.msg.C22_MAP_SQUARE()
          start = end
          end += 4
          (val2.status,) = _struct_i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.planes = []
          for i in range(0, length):
            val3 = C22_GroundRecognitionAndMapping.msg.C22_PLANE_TYPE()
            _x = val3
            start = end
            end += 16
            (_x.x, _x.y, _x.z, _x.d,) = _struct_4f.unpack(str[start:end])
            val2.planes.append(val3)
          val1.column.append(val2)
        self.drivingPath.row.append(val1)
      _x = self
      start = end
      end += 32
      (_x.drivingPath.xOffset, _x.drivingPath.yOffset, _x.drivingPath.robotPos.x, _x.drivingPath.robotPos.y, _x.drivingPath.robotPos.z,) = _struct_2i3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.drivingPath.row)
      buff.write(_struct_I.pack(length))
      for val1 in self.drivingPath.row:
        length = len(val1.column)
        buff.write(_struct_I.pack(length))
        for val2 in val1.column:
          buff.write(_struct_i.pack(val2.status))
          length = len(val2.planes)
          buff.write(_struct_I.pack(length))
          for val3 in val2.planes:
            _x = val3
            buff.write(_struct_4f.pack(_x.x, _x.y, _x.z, _x.d))
      _x = self
      buff.write(_struct_2i3d.pack(_x.drivingPath.xOffset, _x.drivingPath.yOffset, _x.drivingPath.robotPos.x, _x.drivingPath.robotPos.y, _x.drivingPath.robotPos.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.drivingPath is None:
        self.drivingPath = C22_GroundRecognitionAndMapping.msg.C22C0_PATH()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drivingPath.row = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22_ROW_TYPE()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.column = []
        for i in range(0, length):
          val2 = C22_GroundRecognitionAndMapping.msg.C22_MAP_SQUARE()
          start = end
          end += 4
          (val2.status,) = _struct_i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.planes = []
          for i in range(0, length):
            val3 = C22_GroundRecognitionAndMapping.msg.C22_PLANE_TYPE()
            _x = val3
            start = end
            end += 16
            (_x.x, _x.y, _x.z, _x.d,) = _struct_4f.unpack(str[start:end])
            val2.planes.append(val3)
          val1.column.append(val2)
        self.drivingPath.row.append(val1)
      _x = self
      start = end
      end += 32
      (_x.drivingPath.xOffset, _x.drivingPath.yOffset, _x.drivingPath.robotPos.x, _x.drivingPath.robotPos.y, _x.drivingPath.robotPos.z,) = _struct_2i3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_4f = struct.Struct("<4f")
_struct_2i3d = struct.Struct("<2i3d")
class C22(object):
  _type          = 'C22_GroundRecognitionAndMapping/C22'
  _md5sum = '9219f21fa47a24a288c5b9136192062b'
  _request_class  = C22Request
  _response_class = C22Response
