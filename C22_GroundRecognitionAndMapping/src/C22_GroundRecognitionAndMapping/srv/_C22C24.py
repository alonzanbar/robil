"""autogenerated by genpy from C22_GroundRecognitionAndMapping/C22C24Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C22_GroundRecognitionAndMapping.msg

class C22C24Request(genpy.Message):
  _md5sum = "70e3cb910a6be1e3b12f117d0d8e5984"
  _type = "C22_GroundRecognitionAndMapping/C22C24Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C22_GroundRecognitionAndMapping/C0C22_AZI azimuth_msg
C22_GroundRecognitionAndMapping/C0C22_CAM camera_sample_rate_msg
C22_GroundRecognitionAndMapping/C0C22_LAZ laser_sample_rate_msg
C22_GroundRecognitionAndMapping/C0C22_SAF safety_requirements

================================================================================
MSG: C22_GroundRecognitionAndMapping/C0C22_AZI
float32 azimuth

================================================================================
MSG: C22_GroundRecognitionAndMapping/C0C22_CAM
int32 frameRatePerSec

================================================================================
MSG: C22_GroundRecognitionAndMapping/C0C22_LAZ
int32 sampleRatePerSec

================================================================================
MSG: C22_GroundRecognitionAndMapping/C0C22_SAF
int32 safety_req

"""
  __slots__ = ['azimuth_msg','camera_sample_rate_msg','laser_sample_rate_msg','safety_requirements']
  _slot_types = ['C22_GroundRecognitionAndMapping/C0C22_AZI','C22_GroundRecognitionAndMapping/C0C22_CAM','C22_GroundRecognitionAndMapping/C0C22_LAZ','C22_GroundRecognitionAndMapping/C0C22_SAF']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       azimuth_msg,camera_sample_rate_msg,laser_sample_rate_msg,safety_requirements

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C22C24Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.azimuth_msg is None:
        self.azimuth_msg = C22_GroundRecognitionAndMapping.msg.C0C22_AZI()
      if self.camera_sample_rate_msg is None:
        self.camera_sample_rate_msg = C22_GroundRecognitionAndMapping.msg.C0C22_CAM()
      if self.laser_sample_rate_msg is None:
        self.laser_sample_rate_msg = C22_GroundRecognitionAndMapping.msg.C0C22_LAZ()
      if self.safety_requirements is None:
        self.safety_requirements = C22_GroundRecognitionAndMapping.msg.C0C22_SAF()
    else:
      self.azimuth_msg = C22_GroundRecognitionAndMapping.msg.C0C22_AZI()
      self.camera_sample_rate_msg = C22_GroundRecognitionAndMapping.msg.C0C22_CAM()
      self.laser_sample_rate_msg = C22_GroundRecognitionAndMapping.msg.C0C22_LAZ()
      self.safety_requirements = C22_GroundRecognitionAndMapping.msg.C0C22_SAF()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_f3i.pack(_x.azimuth_msg.azimuth, _x.camera_sample_rate_msg.frameRatePerSec, _x.laser_sample_rate_msg.sampleRatePerSec, _x.safety_requirements.safety_req))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.azimuth_msg is None:
        self.azimuth_msg = C22_GroundRecognitionAndMapping.msg.C0C22_AZI()
      if self.camera_sample_rate_msg is None:
        self.camera_sample_rate_msg = C22_GroundRecognitionAndMapping.msg.C0C22_CAM()
      if self.laser_sample_rate_msg is None:
        self.laser_sample_rate_msg = C22_GroundRecognitionAndMapping.msg.C0C22_LAZ()
      if self.safety_requirements is None:
        self.safety_requirements = C22_GroundRecognitionAndMapping.msg.C0C22_SAF()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.azimuth_msg.azimuth, _x.camera_sample_rate_msg.frameRatePerSec, _x.laser_sample_rate_msg.sampleRatePerSec, _x.safety_requirements.safety_req,) = _struct_f3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_f3i.pack(_x.azimuth_msg.azimuth, _x.camera_sample_rate_msg.frameRatePerSec, _x.laser_sample_rate_msg.sampleRatePerSec, _x.safety_requirements.safety_req))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.azimuth_msg is None:
        self.azimuth_msg = C22_GroundRecognitionAndMapping.msg.C0C22_AZI()
      if self.camera_sample_rate_msg is None:
        self.camera_sample_rate_msg = C22_GroundRecognitionAndMapping.msg.C0C22_CAM()
      if self.laser_sample_rate_msg is None:
        self.laser_sample_rate_msg = C22_GroundRecognitionAndMapping.msg.C0C22_LAZ()
      if self.safety_requirements is None:
        self.safety_requirements = C22_GroundRecognitionAndMapping.msg.C0C22_SAF()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.azimuth_msg.azimuth, _x.camera_sample_rate_msg.frameRatePerSec, _x.laser_sample_rate_msg.sampleRatePerSec, _x.safety_requirements.safety_req,) = _struct_f3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f3i = struct.Struct("<f3i")
"""autogenerated by genpy from C22_GroundRecognitionAndMapping/C22C24Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import C22_GroundRecognitionAndMapping.msg

class C22C24Response(genpy.Message):
  _md5sum = "e0bf5feccc6e231a6c595ca0e934f5e5"
  _type = "C22_GroundRecognitionAndMapping/C22C24Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """C22_GroundRecognitionAndMapping/C22C24_PATH drivingPath


================================================================================
MSG: C22_GroundRecognitionAndMapping/C22C24_PATH
C22C24_ROW_TYPE[] row
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22C24_ROW_TYPE
C22C24_MAP_SQUARE[] column
================================================================================
MSG: C22_GroundRecognitionAndMapping/C22C24_MAP_SQUARE
int32 status
int32 AVAILABLE=0
int32 BLOCKED=1
int32 UNCHARTED=2
float32 height
"""
  __slots__ = ['drivingPath']
  _slot_types = ['C22_GroundRecognitionAndMapping/C22C24_PATH']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drivingPath

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(C22C24Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.drivingPath is None:
        self.drivingPath = C22_GroundRecognitionAndMapping.msg.C22C24_PATH()
    else:
      self.drivingPath = C22_GroundRecognitionAndMapping.msg.C22C24_PATH()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.drivingPath.row)
      buff.write(_struct_I.pack(length))
      for val1 in self.drivingPath.row:
        length = len(val1.column)
        buff.write(_struct_I.pack(length))
        for val2 in val1.column:
          _x = val2
          buff.write(_struct_if.pack(_x.status, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.drivingPath is None:
        self.drivingPath = C22_GroundRecognitionAndMapping.msg.C22C24_PATH()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drivingPath.row = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22C24_ROW_TYPE()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.column = []
        for i in range(0, length):
          val2 = C22_GroundRecognitionAndMapping.msg.C22C24_MAP_SQUARE()
          _x = val2
          start = end
          end += 8
          (_x.status, _x.height,) = _struct_if.unpack(str[start:end])
          val1.column.append(val2)
        self.drivingPath.row.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.drivingPath.row)
      buff.write(_struct_I.pack(length))
      for val1 in self.drivingPath.row:
        length = len(val1.column)
        buff.write(_struct_I.pack(length))
        for val2 in val1.column:
          _x = val2
          buff.write(_struct_if.pack(_x.status, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.drivingPath is None:
        self.drivingPath = C22_GroundRecognitionAndMapping.msg.C22C24_PATH()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drivingPath.row = []
      for i in range(0, length):
        val1 = C22_GroundRecognitionAndMapping.msg.C22C24_ROW_TYPE()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.column = []
        for i in range(0, length):
          val2 = C22_GroundRecognitionAndMapping.msg.C22C24_MAP_SQUARE()
          _x = val2
          start = end
          end += 8
          (_x.status, _x.height,) = _struct_if.unpack(str[start:end])
          val1.column.append(val2)
        self.drivingPath.row.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_if = struct.Struct("<if")
class C22C24(object):
  _type          = 'C22_GroundRecognitionAndMapping/C22C24'
  _md5sum = '6cc5f391b717dc1a37aaadba95085358'
  _request_class  = C22C24Request
  _response_class = C22C24Response
