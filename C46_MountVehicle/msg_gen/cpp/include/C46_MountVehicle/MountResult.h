/* Auto-generated by genmsg_cpp for file /home/sharon/ROS_ROBIL_ROOT/robil/C46_MountVehicle/msg/MountResult.msg */
#ifndef C46_MOUNTVEHICLE_MESSAGE_MOUNTRESULT_H
#define C46_MOUNTVEHICLE_MESSAGE_MOUNTRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C46_MountVehicle
{
template <class ContainerAllocator>
struct MountResult_ {
  typedef MountResult_<ContainerAllocator> Type;

  MountResult_()
  : mounted(0.0)
  {
  }

  MountResult_(const ContainerAllocator& _alloc)
  : mounted(0.0)
  {
  }

  typedef float _mounted_type;
  float mounted;


  typedef boost::shared_ptr< ::C46_MountVehicle::MountResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C46_MountVehicle::MountResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MountResult
typedef  ::C46_MountVehicle::MountResult_<std::allocator<void> > MountResult;

typedef boost::shared_ptr< ::C46_MountVehicle::MountResult> MountResultPtr;
typedef boost::shared_ptr< ::C46_MountVehicle::MountResult const> MountResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C46_MountVehicle::MountResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C46_MountVehicle::MountResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C46_MountVehicle

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C46_MountVehicle::MountResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C46_MountVehicle::MountResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C46_MountVehicle::MountResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e265b97fe86999f6bcce88ace33a325";
  }

  static const char* value(const  ::C46_MountVehicle::MountResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8e265b97fe86999fULL;
  static const uint64_t static_value2 = 0x6bcce88ace33a325ULL;
};

template<class ContainerAllocator>
struct DataType< ::C46_MountVehicle::MountResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C46_MountVehicle/MountResult";
  }

  static const char* value(const  ::C46_MountVehicle::MountResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C46_MountVehicle::MountResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the result\n\
float32 mounted\n\
\n\
";
  }

  static const char* value(const  ::C46_MountVehicle::MountResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C46_MountVehicle::MountResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C46_MountVehicle::MountResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mounted);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MountResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C46_MountVehicle::MountResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C46_MountVehicle::MountResult_<ContainerAllocator> & v) 
  {
    s << indent << "mounted: ";
    Printer<float>::stream(s, indent + "  ", v.mounted);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C46_MOUNTVEHICLE_MESSAGE_MOUNTRESULT_H

