/* Auto-generated by genmsg_cpp for file /home/sharon/ROS_ROBIL_ROOT/robil/C46_MountVehicle/msg/MountGoal.msg */
#ifndef C46_MOUNTVEHICLE_MESSAGE_MOUNTGOAL_H
#define C46_MOUNTVEHICLE_MESSAGE_MOUNTGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C46_MountVehicle
{
template <class ContainerAllocator>
struct MountGoal_ {
  typedef MountGoal_<ContainerAllocator> Type;

  MountGoal_()
  : mount(0.0)
  {
  }

  MountGoal_(const ContainerAllocator& _alloc)
  : mount(0.0)
  {
  }

  typedef float _mount_type;
  float mount;


  typedef boost::shared_ptr< ::C46_MountVehicle::MountGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C46_MountVehicle::MountGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MountGoal
typedef  ::C46_MountVehicle::MountGoal_<std::allocator<void> > MountGoal;

typedef boost::shared_ptr< ::C46_MountVehicle::MountGoal> MountGoalPtr;
typedef boost::shared_ptr< ::C46_MountVehicle::MountGoal const> MountGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C46_MountVehicle::MountGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C46_MountVehicle::MountGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C46_MountVehicle

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C46_MountVehicle::MountGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C46_MountVehicle::MountGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C46_MountVehicle::MountGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9f6e38f534f3c2f8b1c224dd056832a3";
  }

  static const char* value(const  ::C46_MountVehicle::MountGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9f6e38f534f3c2f8ULL;
  static const uint64_t static_value2 = 0xb1c224dd056832a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::C46_MountVehicle::MountGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C46_MountVehicle/MountGoal";
  }

  static const char* value(const  ::C46_MountVehicle::MountGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C46_MountVehicle::MountGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
float32 mount\n\
\n\
";
  }

  static const char* value(const  ::C46_MountVehicle::MountGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C46_MountVehicle::MountGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C46_MountVehicle::MountGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mount);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MountGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C46_MountVehicle::MountGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C46_MountVehicle::MountGoal_<ContainerAllocator> & v) 
  {
    s << indent << "mount: ";
    Printer<float>::stream(s, indent + "  ", v.mount);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C46_MOUNTVEHICLE_MESSAGE_MOUNTGOAL_H

