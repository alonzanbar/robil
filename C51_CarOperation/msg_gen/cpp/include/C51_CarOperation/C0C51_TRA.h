/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C51_CarOperation/msg/C0C51_TRA.msg */
#ifndef C51_CAROPERATION_MESSAGE_C0C51_TRA_H
#define C51_CAROPERATION_MESSAGE_C0C51_TRA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C51_CarOperation
{
template <class ContainerAllocator>
struct C0C51_TRA_ {
  typedef C0C51_TRA_<ContainerAllocator> Type;

  C0C51_TRA_()
  : TRA_RNDF()
  , TAR_MDF()
  , TAR_DES()
  {
  }

  C0C51_TRA_(const ContainerAllocator& _alloc)
  : TRA_RNDF(_alloc)
  , TAR_MDF(_alloc)
  , TAR_DES(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _TRA_RNDF_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TRA_RNDF;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _TAR_MDF_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TAR_MDF;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _TAR_DES_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TAR_DES;


  typedef boost::shared_ptr< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C0C51_TRA
typedef  ::C51_CarOperation::C0C51_TRA_<std::allocator<void> > C0C51_TRA;

typedef boost::shared_ptr< ::C51_CarOperation::C0C51_TRA> C0C51_TRAPtr;
typedef boost::shared_ptr< ::C51_CarOperation::C0C51_TRA const> C0C51_TRAConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C51_CarOperation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "16d4b6bf19408bb80fd1298061bb06e5";
  }

  static const char* value(const  ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x16d4b6bf19408bb8ULL;
  static const uint64_t static_value2 = 0x0fd1298061bb06e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C51_CarOperation/C0C51_TRA";
  }

  static const char* value(const  ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string TRA_RNDF\n\
string TAR_MDF\n\
string TAR_DES\n\
\n\
";
  }

  static const char* value(const  ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.TRA_RNDF);
    stream.next(m.TAR_MDF);
    stream.next(m.TAR_DES);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C0C51_TRA_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C51_CarOperation::C0C51_TRA_<ContainerAllocator> & v) 
  {
    s << indent << "TRA_RNDF: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.TRA_RNDF);
    s << indent << "TAR_MDF: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.TAR_MDF);
    s << indent << "TAR_DES: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.TAR_DES);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C51_CAROPERATION_MESSAGE_C0C51_TRA_H

