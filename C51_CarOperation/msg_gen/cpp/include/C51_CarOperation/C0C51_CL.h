/* Auto-generated by genmsg_cpp for file /home/ariy/robil/C51_CarOperation/msg/C0C51_CL.msg */
#ifndef C51_CAROPERATION_MESSAGE_C0C51_CL_H
#define C51_CAROPERATION_MESSAGE_C0C51_CL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace C51_CarOperation
{
template <class ContainerAllocator>
struct C0C51_CL_ {
  typedef C0C51_CL_<ContainerAllocator> Type;

  C0C51_CL_()
  : car(0.0)
  {
  }

  C0C51_CL_(const ContainerAllocator& _alloc)
  : car(0.0)
  {
  }

  typedef float _car_type;
  float car;


  typedef boost::shared_ptr< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::C51_CarOperation::C0C51_CL_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct C0C51_CL
typedef  ::C51_CarOperation::C0C51_CL_<std::allocator<void> > C0C51_CL;

typedef boost::shared_ptr< ::C51_CarOperation::C0C51_CL> C0C51_CLPtr;
typedef boost::shared_ptr< ::C51_CarOperation::C0C51_CL const> C0C51_CLConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::C51_CarOperation::C0C51_CL_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace C51_CarOperation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::C51_CarOperation::C0C51_CL_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cb8a7131dab66e8b8913c33d75ed20ce";
  }

  static const char* value(const  ::C51_CarOperation::C0C51_CL_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcb8a7131dab66e8bULL;
  static const uint64_t static_value2 = 0x8913c33d75ed20ceULL;
};

template<class ContainerAllocator>
struct DataType< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> > {
  static const char* value() 
  {
    return "C51_CarOperation/C0C51_CL";
  }

  static const char* value(const  ::C51_CarOperation::C0C51_CL_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 car\n\
\n\
";
  }

  static const char* value(const  ::C51_CarOperation::C0C51_CL_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.car);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct C0C51_CL_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::C51_CarOperation::C0C51_CL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::C51_CarOperation::C0C51_CL_<ContainerAllocator> & v) 
  {
    s << indent << "car: ";
    Printer<float>::stream(s, indent + "  ", v.car);
  }
};


} // namespace message_operations
} // namespace ros

#endif // C51_CAROPERATION_MESSAGE_C0C51_CL_H

