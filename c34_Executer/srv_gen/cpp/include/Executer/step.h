/* Auto-generated by genmsg_cpp for file /home/ariy/workspace/Executer/srv/step.srv */
#ifndef EXECUTER_SERVICE_STEP_H
#define EXECUTER_SERVICE_STEP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace Executer
{
template <class ContainerAllocator>
struct stepRequest_ {
  typedef stepRequest_<ContainerAllocator> Type;

  stepRequest_()
  : tree_id()
  {
  }

  stepRequest_(const ContainerAllocator& _alloc)
  : tree_id(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tree_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  tree_id;


  typedef boost::shared_ptr< ::Executer::stepRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Executer::stepRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct stepRequest
typedef  ::Executer::stepRequest_<std::allocator<void> > stepRequest;

typedef boost::shared_ptr< ::Executer::stepRequest> stepRequestPtr;
typedef boost::shared_ptr< ::Executer::stepRequest const> stepRequestConstPtr;


template <class ContainerAllocator>
struct stepResponse_ {
  typedef stepResponse_<ContainerAllocator> Type;

  stepResponse_()
  : output()
  {
  }

  stepResponse_(const ContainerAllocator& _alloc)
  : output(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _output_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  output;


  typedef boost::shared_ptr< ::Executer::stepResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Executer::stepResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct stepResponse
typedef  ::Executer::stepResponse_<std::allocator<void> > stepResponse;

typedef boost::shared_ptr< ::Executer::stepResponse> stepResponsePtr;
typedef boost::shared_ptr< ::Executer::stepResponse const> stepResponseConstPtr;

struct step
{

typedef stepRequest Request;
typedef stepResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct step
} // namespace Executer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Executer::stepRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Executer::stepRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Executer::stepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "035d9dc2af2b0acc4c1fca0de404f272";
  }

  static const char* value(const  ::Executer::stepRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x035d9dc2af2b0accULL;
  static const uint64_t static_value2 = 0x4c1fca0de404f272ULL;
};

template<class ContainerAllocator>
struct DataType< ::Executer::stepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Executer/stepRequest";
  }

  static const char* value(const  ::Executer::stepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Executer::stepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string tree_id\n\
\n\
";
  }

  static const char* value(const  ::Executer::stepRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Executer::stepResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Executer::stepResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Executer::stepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0825d95fdfa2c8f4bbb4e9c74bccd3fd";
  }

  static const char* value(const  ::Executer::stepResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0825d95fdfa2c8f4ULL;
  static const uint64_t static_value2 = 0xbbb4e9c74bccd3fdULL;
};

template<class ContainerAllocator>
struct DataType< ::Executer::stepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Executer/stepResponse";
  }

  static const char* value(const  ::Executer::stepResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Executer::stepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string output\n\
\n\
\n\
";
  }

  static const char* value(const  ::Executer::stepResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Executer::stepRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tree_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct stepRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Executer::stepResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.output);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct stepResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<Executer::step> {
  static const char* value() 
  {
    return "2d787918d0efb6823e526f109f8fafe3";
  }

  static const char* value(const Executer::step&) { return value(); } 
};

template<>
struct DataType<Executer::step> {
  static const char* value() 
  {
    return "Executer/step";
  }

  static const char* value(const Executer::step&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Executer::stepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d787918d0efb6823e526f109f8fafe3";
  }

  static const char* value(const Executer::stepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Executer::stepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Executer/step";
  }

  static const char* value(const Executer::stepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<Executer::stepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d787918d0efb6823e526f109f8fafe3";
  }

  static const char* value(const Executer::stepResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<Executer::stepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Executer/step";
  }

  static const char* value(const Executer::stepResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EXECUTER_SERVICE_STEP_H

